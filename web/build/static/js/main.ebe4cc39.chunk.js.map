{"version":3,"sources":["api.js","analytics.js","components/TimeInput.js","components/AnimatingButton.js","pages/Home.js","pages/Intro.js","components/StripeCardEntry.js","pages/Payment.js","pages/FinishOnboarding.js","App.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","console","log","process","apiServer","trim","post","route","payload","a","token","get","headers","Accept","Authorization","btoa","fetch","method","body","JSON","stringify","fetchResult","ok","text","parse","status","params","url","qs","login","phoneNumber","secretCode","password","response","pullPatientData","calendarMonth","pullPatientDataForNumber","pullPatientPaymentData","updateDoseWindow","updatedDoseWindow","submitPaymentInfo","ReactGA","initialize","cookieFlags","shouldLogAnalytics","TimeInput","value","onChangeTime","React","useState","hour","setHour","minute","setMinute","Box","direction","Select","options","plain","onChange","newHour","toString","parseInt","AnimatingButton","animating","props","Button","alignSelf","label","disabled","Spinner","color","children","Home","useCookies","setCookie","removeCookie","patientData","setPatientData","impersonateOptions","setImpersonateOptions","impersonating","editingDoseWindow","setEditingDoseWindow","setDeletingDoseWindow","timeRange","setAnimating","loadData","DateTime","local","useCallback","loadedData","impersonateList","userId","patientId","event","category","action","secure","map","tuple_data","shouldRerender","useMemo","month","useEffect","date","dayColor","dt","fromJSDate","day","eventData","length","dayOfMonthData","day_status","align","justify","margin","vertical","width","height","round","background","Paragraph","units","weight","glucose","data","metric","healthMetricData","metric_list","datasets","x","fromHTTP","time","y","fill","backgroundColor","borderColor","scales","type","unit","grid","ticks","min","minus","days","toISODate","title","display","plugins","legend","elements","point","hitRadius","hoverRadius","showLine","systolic","diastolic","datalabels","listItem","nextDayConversion","plus","validDoseWindows","editingStartTime","utc","start_hour","start_minute","setZone","set","editingEndTime","end_hour","end_minute","minutes","doseWindows","dw","id","existingStartTime","existingEndTime","currentTime","currentDay","arr","Math","floor","random","startTime","endTime","size","bottom","newTime","newDwTime","onClick","padding","horizontal","top","state","to","Intro","setPhoneNumber","setSecretCode","setPassword","passwordConfirm","setPasswordConfirm","componentToDisplay","setComponentToDisplay","authError","setAuthError","submitAll","getInputField","textAlign","TextInput","icon","Phone","placeholder","target","Fireball","Lock","flex","pad","Heading","dark","Login","StripeCardEntry","submitText","clientSecret","afterSubmitAction","stripe","useStripe","useElements","validatingCard","setValidatingCard","submitPayment","cardElement","getElement","CardElement","confirmCardPayment","payment_method","card","billing_details","name","setup_future_usage","error","paymentIntent","Payment","loading","setLoading","paymentData","setPaymentData","history","useHistory","push","includes","stripePromise","loadStripe","publishable_key","client_secret","subscription_end_date","toLocaleString","DATE_MED","FinishOnboarding","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CookiesProvider","Grommet","theme","global","colors","brand","light","paragraph","spinner","container","themeMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebe4cc39.chunk.js","sourcesContent":["import * as qs from 'query-string';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconsole.log(process.env.NODE_ENV);\nconst apiServer = process.env.NODE_ENV.trim() === \"production\" ? \"https://coherence-chat.herokuapp.com\" : 'http://localhost:5000';\n\nconst post = async (route, payload) => {\n  const token = cookies.get('token');\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    \"Access-Control-Allow_Methods\": \"POST\",\n    \"Access-Control_Allow_Headers\": \"*\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  };\n  if (token) {\n    headers.Authorization = 'Basic ' + btoa(token + \":unused\");\n  }\n  const fetchResult = await fetch(`${apiServer}/${route}`, {\n    method: 'post',\n    headers,\n    body: JSON.stringify(payload),\n  });\n\n  if (fetchResult.ok) {\n    const text = await fetchResult.text();\n    return JSON.parse(text);\n  }\n  console.log(\n    `POST call to /${route} errored with status ${fetchResult.status}`,\n  );\n  return null;\n};\n\nconst get = async (route, params) => {\n  let url = `${apiServer}/${route}`;\n  url += `?${qs.stringify(params)}`;\n\n  const token = cookies.get('token');\n  const headers = {\n    Accept: 'application/json',\n    \"Access-Control-Allow-Methods\": \"GET\",\n    \"Access-Control-Allow-Headers\": \"*\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  };\n  if (token) {\n    headers.Authorization = 'Basic ' + btoa(token + \":unused\");\n  }\n  const fetchResult = await fetch(url, {\n    method: 'get',\n    headers,\n  });\n  if (fetchResult.ok) {\n    const text = await fetchResult.text();\n    console.log(text);\n    return JSON.parse(text);\n  }\n  console.log(\n    `GET call to /${route} errored with status ${fetchResult.status}`,\n  );\n  return null;\n};\n\nexport const login = async (phoneNumber, secretCode, password) => {\n    const response = await post(\"login/new\", { phoneNumber, secretCode, password });\n    return response;\n}\n\nexport const pullPatientData = async (calendarMonth) => {\n  const response = await get(\"patientData/new\", { calendarMonth });\n  return response;\n}\n\nexport const pullPatientDataForNumber = async (phoneNumber, calendarMonth) => {\n  const response = await get(\"patientData/new\", { phoneNumber, calendarMonth });\n  return response;\n}\n\nexport const pullPatientPaymentData = async () => {\n  console.log(\"calling this at least?\")\n  const response = await get(\"user/getPaymentData\", {});\n  return response;\n}\n\nexport const updateDoseWindow = async (updatedDoseWindow) => {\n  const response = await post(\"doseWindow/update/new\", { updatedDoseWindow });\n  return response;\n}\n\nexport const deleteDoseWindow = async (dwId) => {\n  const response = await post(\"doseWindow/deactivate/new\", { doseWindowId: dwId });\n  return response;\n}\n\nexport const pauseUser = async () => {\n  const response = await post(\"user/pause/new\");\n  return response;\n}\n\nexport const resumeUser = async () => {\n  const response = await post(\"user/resume/new\");\n  return response;\n}\n\nexport const setHealthMetricsTracking = async (metricList) => {\n  const response = await post(\"user/healthMetrics/set\", { metricList });\n  return response;\n}\n\nexport const submitPaymentInfo = async () => {\n  const response = await post(\"user/submitPaymentInfo\", {});\n  return response;\n}","import ReactGA from 'react-ga';\n\nReactGA.initialize('UA-196778289-2', {cookieFlags: 'max-age=7200;SameSite=None;Secure'});\n\nconst shouldLogAnalytics = process.env.NODE_ENV.trim() === \"production\";\n\nexport const trackPatientPortalLoad = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Loaded homepage\",\n            label: userId\n        });\n    }\n}\n\nexport const trackViewedDayDetails = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Viewed day details\",\n            label: userId\n        });\n    }\n}\n\nexport const trackStartAddingDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Start adding dose window\",\n            label: userId\n        });\n    }\n}\n\nexport const trackStartEditingDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Start editing dose window\",\n            label: userId\n        });\n    }\n}\n\nexport const trackSubmitEditedDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Submit edited dose window\",\n            label: userId\n        });\n    }\n}\n\nexport const trackStartDeletingDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Start deleting dose window\",\n            label: userId\n        });\n    }\n}\n\nexport const trackSubmitDeletingDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Submit deleting dose window\",\n            label: userId\n        });\n    }\n}\n\nexport const trackStartEditingHealthMetrics = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Start editing health metrics\",\n            label: userId\n        });\n    }\n}\n\nexport const trackSubmitEditingHealthMetrics = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Submit editing health metrics\",\n            label: userId\n        });\n    }\n}\n\nexport const trackPausedService = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Churn\",\n            action: \"Paused service\",\n            label: userId\n        });\n    }\n}\n\nexport const trackResumedService = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Growth\",\n            action: \"Resumed service\",\n            label: userId\n        });\n    }\n}","import React from \"react\";\n\nimport { Box, Select } from \"grommet\";\n\nconst TimeInput = ({value, onChangeTime}) => {\n    const [hour, setHour] = React.useState(value.hour);\n    const [minute, setMinute] = React.useState(value.minute);\n    return (\n        <Box direction=\"row\">\n            <Select options={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]} value={hour > 12 ? hour - 12 : (hour === 0 ? 12 : hour)} plain\n                onChange={\n                    ({value}) => {\n                        let newHour = hour >= 12 ? value + 12 : value % 12;\n                        setHour(newHour);\n                        onChangeTime({hour: newHour, minute});\n                    }\n                }\n            />\n            <Select options={[\"00\", \"15\", \"30\", \"45\"]} value={`${minute === 0 ? '0' : ''}${minute.toString()}`} plain onChange={({value}) => {\n                setMinute(parseInt(value));\n                onChangeTime({hour, minute: parseInt(value)});\n            }}/>\n            <Select options={[\"AM\", \"PM\"]} value={hour >= 12 ? \"PM\" : \"AM\"} plain onChange={({value}) => {\n                let newHour = hour;\n                if (value === \"AM\") {\n                    if (hour >= 12) {\n                        newHour = hour - 12;\n                        setHour(hour - 12);\n                    }\n                } else {\n                    if (hour < 12) {\n                        newHour = hour + 12;\n                        setHour(hour + 12);\n                    }\n                }\n                onChangeTime({hour: newHour, minute});\n            }}/>\n        </Box>\n    )\n}\n\nexport default TimeInput;","import React from \"react\";\nimport { Button, Spinner } from \"grommet\";\nimport { get } from \"lodash\";\n\nconst AnimatingButton = ({animating, ...props}) => {\n    if (animating) {\n        return <Button {...props} alignSelf=\"center\" label={null} disabled={true}><Spinner color={get(props, \"background.dark\", false) ? \"#FFF\" : \"brand\"}/></Button>;\n    } else {\n        return <Button {...props}>{props.children}</Button>;\n    }\n}\n\nexport default AnimatingButton;","import React from \"react\";\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport {\n    deleteDoseWindow,\n    pauseUser,\n    pullPatientData,\n    pullPatientDataForNumber,\n    resumeUser,\n    setHealthMetricsTracking,\n    updateDoseWindow,\n} from '../api';\nimport {\n    trackStartAddingDoseWindow,\n    trackPatientPortalLoad,\n    trackViewedDayDetails,\n    trackStartDeletingDoseWindow,\n    trackStartEditingDoseWindow,\n    trackStartEditingHealthMetrics,\n    trackSubmitDeletingDoseWindow,\n    trackSubmitEditedDoseWindow,\n    trackSubmitEditingHealthMetrics,\n    trackResumedService,\n    trackPausedService\n} from '../analytics';\nimport { Scatter } from 'react-chartjs-2';\nimport { Box, Button, CheckBoxGroup, Calendar, DropButton, Grid, Heading, Layer, Paragraph, Select } from \"grommet\";\nimport { Add, Checkmark, CircleInformation, Clear, Close, FormNextLink} from \"grommet-icons\";\nimport { DateTime } from 'luxon';\nimport 'chartjs-adapter-luxon';\nimport TimeInput from \"../components/TimeInput\";\nimport AnimatingButton from \"../components/AnimatingButton\";\n\nconst Home = () => {\n    const [cookies, setCookie, removeCookie] = useCookies(['token']);\n    const [patientData, setPatientData] = React.useState(null);\n    const [calendarMonth, setCalendarMonth] = React.useState(5);\n    const [impersonateOptions, setImpersonateOptions] = React.useState(null);\n    const [impersonating, setImpersonating] = React.useState(null);\n    const [selectedDay, setSelectedDay] = React.useState(null);\n    const [editingDoseWindow, setEditingDoseWindow] = React.useState(null);\n    const [deletingDoseWindow, setDeletingDoseWindow] = React.useState(null);\n    const [editingHealthTracking, setEditingHealthTracking] = React.useState(null);\n    const [timeRange, setTimeRange] = React.useState({label: \"all time\", value: null});\n    console.log(timeRange);\n    const [animating, setAnimating] = React.useState(false);  // this is setting animating for ALL buttons for now\n\n    const dateRange = [DateTime.local(2021, 4, 1), DateTime.local(2021, 5, 31)]\n\n    const loadData = React.useCallback(async () => {\n        let loadedData = null;\n        if (impersonating) {\n            loadedData = await pullPatientDataForNumber(impersonating.value, calendarMonth);\n        } else {\n            loadedData = await pullPatientData(calendarMonth);\n        };\n        if (loadedData === null) {\n            removeCookie(\"token\");\n            return;\n        }\n        console.log(loadedData);\n        setPatientData(loadedData);\n        if (loadedData.impersonateList === null) { // only track non impersonating data\n            trackPatientPortalLoad(loadedData.patientId);\n        }\n        setCookie('token', loadedData.token, {secure: true});  // refresh login token\n        if (loadedData.impersonateList) {\n            setImpersonateOptions(\n                loadedData.impersonateList.map((tuple_data) => { return { label: tuple_data[0], value: tuple_data[1]}})\n            );\n        }\n        setAnimating(false);\n    }, [calendarMonth, impersonating, removeCookie, setCookie])\n\n    const shouldRerender = React.useMemo(() => {\n        if (!cookies.token) {\n            return false;\n        }\n        if (patientData === null) {\n            return true;\n        }\n        if (patientData.month !== calendarMonth) {\n            return true;\n        }\n        if (!!impersonating !== !! patientData.impersonating) {\n            return true;\n        }\n        if (impersonating && patientData.impersonating && patientData.phoneNumber !== impersonating.value) {\n            return true;\n        }\n        return false;\n    }, [calendarMonth, cookies.token, impersonating, patientData]);\n\n    React.useEffect(() => {\n        console.log(\"rerendering\")\n        if (shouldRerender) {\n            loadData();\n        }\n    }, [loadData, shouldRerender]);\n\n    const logout = () => {\n        removeCookie(\"token\");\n    }\n\n    const renderDay = React.useCallback(({date}) => {\n        let dayColor = null;\n        const dt = DateTime.fromJSDate(date);\n        const day = dt.day;\n        if (patientData !== null) {\n            if (patientData.eventData.length >= day) {\n                const dayOfMonthData = patientData.eventData[day - 1];\n                if (dt.month === calendarMonth) {\n                    if (dayOfMonthData.day_status === \"taken\") {\n                        dayColor = \"status-ok\";\n                    } else if (dayOfMonthData.day_status === \"missed\") {\n                        dayColor = \"status-error\";\n                    } else if (dayOfMonthData.day_status === \"skip\") {\n                        dayColor = \"status-warning\";\n                    }\n                }\n            }\n        }\n        return (\n            <Box align=\"center\" justify=\"center\" margin={{vertical: \"xsmall\"}}>\n                <Box width=\"30px\" height=\"30px\" round=\"medium\" background={{color: dayColor}} align=\"center\" justify=\"center\">\n                    <Paragraph>{day}</Paragraph>\n                </Box>\n            </Box>\n        );\n    }, [calendarMonth, patientData]);\n\n    const formattedHealthMetricData = React.useMemo(() => {\n        const units = {\n            weight: \"pounds\",\n            glucose: \"mg/dL\",\n            \"blood pressure\": \"mm/hg\"\n        }\n        const data = {}\n        if (patientData !== null) {\n            for (const metric in patientData.healthMetricData) {\n                const metric_list = patientData.healthMetricData[metric];\n                console.log(metric_list);\n                if (metric !== \"blood pressure\") {\n                    data[metric] = {\n                        datasets: [{\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value};\n                            }),\n                            label: metric,\n                            fill: false,\n                            backgroundColor: 'rgb(255, 99, 132)',\n                            borderColor: 'rgba(255, 99, 132, 0.2)'\n                        }], options:{\n                                scales: {\n                                    x: {\n                                        type: \"time\",\n                                        time: {unit: \"day\"},\n                                        grid: {\"color\": [\"#777\"]},\n                                        ticks:{color: \"#FFF\"},\n                                        min: timeRange.value !== null ? DateTime.local().minus({days: timeRange.value}).toISODate() : null},\n                                    y: {grid: {\"color\": [\"#AAA\"]}, ticks:{color: \"#FFF\"}, title: {text:units[metric], display: true, color: \"#FFF\"}}\n                                },\n                                color: \"white\",\n                                plugins: {\n                                    legend: {display: false},\n                                },\n                                elements: {\n                                    point: {\n                                        hitRadius: 10,\n                                        hoverRadius: 10\n                                    }\n                                },\n                                showLine: true\n                        }\n                    };\n                } else { // blood pressure has two timeseries\n                    data[metric] = {\n                        datasets: [\n                        {\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value.systolic};\n                            }),\n                            label: \"systolic\",\n                            fill: false,\n                            backgroundColor: 'rgb(255, 99, 132)',\n                            borderColor: 'rgba(255, 99, 132, 0.2)'\n                        },\n                        {\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value.diastolic};\n                            }),\n                            label: \"diastolic\",\n                            fill: false,\n                            backgroundColor: 'rgb(99, 255, 132)',\n                            borderColor: 'rgba(99, 255, 132, 0.2)'\n                        }\n                    ], options:{\n                        scales: {\n                            x: {\n                                type: \"time\",\n                                time: {unit: \"day\"},\n                                grid: {\"color\": [\"#777\"]},\n                                ticks:{color: \"#FFF\"},\n                                min: timeRange.value !== null ? DateTime.local().minus({days: timeRange.value}).toISODate() : null\n                            },\n                            y: {grid: {\"color\": [\"#AAA\"]}, ticks:{color: \"#FFF\"}, title: {text:units[metric], display: true, color: \"#FFF\"}}\n                        },\n\n                        color: \"white\",\n                        plugins: {\n                            datalabels: {color: 'black'}\n                        },\n                        elements: {\n                            point: {\n                                hitRadius: 10,\n                                hoverRadius: 10\n                            }\n                        },\n                        showLine: true\n                    }\n                    };\n                }\n            }\n        }\n        console.log(\"returned HM data:\")\n        console.log(data);\n\n        return data;\n    }, [patientData, timeRange]);\n\n    const renderImpersonateListItem = React.useCallback((listItem) => {\n        console.log(listItem);\n        return listItem.label;\n    }, [])\n\n    const nextDayConversion = (dt) => {\n        if (dt.hour < 4) {\n            return dt.plus({days: 1});\n        }\n        return dt;\n    }\n\n    const validDoseWindows = React.useMemo(() => {\n        console.log(\"recomputing\")\n        if (editingDoseWindow === null) {\n            return true; // if you're not editing anything you're valid\n        };\n        if (patientData === null) {\n            return true;  // if we have no patient data your dose windows are fine\n        };\n        const editingStartTime = nextDayConversion(DateTime.utc(2021, 5, 1, editingDoseWindow.start_hour, editingDoseWindow.start_minute).setZone(\"local\").set({month: 5, day: 1}));\n        const editingEndTime = nextDayConversion(DateTime.utc(2021, 5, 1, editingDoseWindow.end_hour, editingDoseWindow.end_minute).setZone(\"local\").set({month: 5, day: 1}));\n        if (editingEndTime < editingStartTime.plus({minutes: 30})) {\n            return false; // dose window is too short\n        }\n        for (const dw of patientData.doseWindows) {\n            if (dw.id === editingDoseWindow.id) {\n                continue;  // we don't compare to the one we're editing\n            }\n            const existingStartTime = nextDayConversion(DateTime.utc(2021, 5, 1, dw.start_hour, dw.start_minute).setZone(\"local\").set({month: 5, day: 1}));\n            const existingEndTime = nextDayConversion(DateTime.utc(2021, 5, 1, dw.end_hour, dw.end_minute).setZone(\"local\").set({month: 5, day: 1}));\n            if (editingStartTime <= existingStartTime && existingStartTime <= editingEndTime) {\n                return false;\n            }\n            if (editingStartTime <= existingEndTime && existingEndTime <= editingEndTime) {\n                return false;\n            }\n        }\n        return true;\n    }, [editingDoseWindow, patientData]);\n\n    const currentTimeOfDay = React.useMemo(() => {\n        const currentTime = DateTime.local();\n        if (currentTime.hour > 4 && currentTime.hour < 12) {\n            return \"morning\";\n        } else if (currentTime.hour > 12 && currentTime.hour < 18) {\n            return \"afternoon\";\n        } else {\n            return \"evening\"\n        }\n    }, []);\n\n    const dateToDisplay = React.useMemo(() => {\n        const currentDay = DateTime.local();\n        if (calendarMonth === currentDay.month) {\n            return currentDay;\n        } else {\n            return currentDay.set({month: calendarMonth, day: 1});\n        }\n    }, [calendarMonth])\n\n    const randomChoice = (arr) => {\n        return arr[Math.floor(arr.length * Math.random())];\n    }\n    const randomHeaderEmoji = React.useMemo(() =>  {\n        return randomChoice([\"💫\", \"🌈\", \"🌱\", \"🏆\", \"📈\", \"💎\", \"💡\", \"🔆\", \"🔔\"]);\n    }, [])\n\n    const renderDoseWindowEditFields = React.useCallback(() => {\n        if (patientData === null) {\n            return null;\n        }\n        const startTime = DateTime.utc(2021, 5, 1, editingDoseWindow.start_hour, editingDoseWindow.start_minute);\n        const endTime = DateTime.utc(2021, 5, 1, editingDoseWindow.end_hour, editingDoseWindow.end_minute);\n        return (\n            <>\n                <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Start time (earliest time you'll be reminded)</Paragraph>\n                <TimeInput value={startTime.setZone('local')} color=\"dark-3\" onChangeTime={\n                    (newTime) => {\n                        const newDwTime = DateTime.local(2021, 5, 1, newTime.hour, newTime.minute).setZone(\"UTC\");\n                        setEditingDoseWindow({...editingDoseWindow, start_hour: newDwTime.hour, start_minute: newDwTime.minute});\n                    }}\n                />\n                <Paragraph size=\"small\" margin={{bottom: \"none\"}}>End time (latest time you'll be reminded)</Paragraph>\n                <TimeInput value={endTime.setZone('local')} color=\"dark-3\" onChangeTime={\n                    (newTime) => {\n                        console.log(`changed time to ${JSON.stringify(newTime)}`)\n                        const newDwTime = DateTime.local(2021, 5, 1, newTime.hour, newTime.minute).setZone(\"UTC\");\n                        setEditingDoseWindow({...editingDoseWindow, end_hour: newDwTime.hour, end_minute: newDwTime.minute});\n                    }}\n                />\n                {<AnimatingButton\n                    onClick={async () => {\n                        setAnimating(true);\n                        console.log(\"set animating\");\n                        await updateDoseWindow(editingDoseWindow);\n                        await loadData();\n                        setEditingDoseWindow(null);\n                        if (impersonateOptions === null) {\n                            trackSubmitEditedDoseWindow(patientData.patientId);\n                        }\n                    }}\n                    label={validDoseWindows ? editingDoseWindow.id ? \"Update\" : \"Create\" : \"Invalid dose window\"}\n                    disabled={!validDoseWindows}\n                    animating={animating}\n                />}\n                {editingDoseWindow.id ? <AnimatingButton onClick={() => {\n                    setDeletingDoseWindow(editingDoseWindow);\n                    if (impersonateOptions === null) {\n                        trackStartDeletingDoseWindow(patientData.patientId);\n                    }\n                }}\n                    disabled={animating}\n                    size=\"small\"\n                    padding={{horizontal: \"none\"}}\n                    margin={{top: \"medium\"}}\n                    label=\"Delete dose window\"\n                    color=\"status-error\"\n                    plain={true}\n                    alignSelf=\"center\"\n                /> : null}\n            </>\n        )\n    }, [animating, editingDoseWindow, impersonateOptions, loadData, patientData, validDoseWindows]);\n\n    if (!cookies.token) {\n        return <Redirect to=\"/login\"/>;\n    }\n    if (patientData !== null && patientData.state === \"payment_method_requested\", \"subscription_expired\") {\n        return <Redirect to=\"/payment\"/>\n    }\n    if (patientData !== null && [\"intro\", \"dose_windows_requested\", \"dose_window_times_requested\", \"timezone_requested\"].includes(patientData.state)) {\n        return <Redirect to=\"/finishOnboarding\"/>\n    }\n\n    const orderDays = (t1, t2) => {\n        if (t1 === t2) {\n            return 0;\n        }\n        if (t1 === \"morning\" || (t1 === \"afternoon\" && t2 === \"evening\")) {\n            return -1;\n        }\n        return 1;\n    }\n\n    console.log(timeRange.label);\n    return (\n        <Box>\n            {impersonateOptions !== null ?\n                <Box direction=\"row\" align=\"center\" gap=\"small\" pad={{\"horizontal\": \"medium\"}}>\n                    <Paragraph>Impersonating:</Paragraph>\n                    <Select\n                        options={impersonateOptions}\n                        children={renderImpersonateListItem}\n                        onChange={({option}) => {\n                            console.log(\"setting\");\n                            setImpersonating(option);\n                        }}\n                    />\n                </Box> : null}\n            <Box align=\"center\">\n                <Heading size=\"small\">Good {currentTimeOfDay}{patientData ? `, ${patientData.patientName}` : \"\"}.</Heading>\n            </Box>\n            <Box>\n                {patientData && patientData.takeNow ?\n                    <Box\n                        align=\"center\"\n                        background={{\"color\":\"status-warning\", \"dark\": true}}\n                        round=\"medium\"\n                        margin={{horizontal: \"large\"}}\n                        pad={{vertical: \"medium\"}}\n                        animation={{\"type\":\"pulse\",\"size\":\"medium\",\"duration\":2000}}\n                    >\n                        <Paragraph alignSelf=\"center\" margin={{vertical: \"none\"}}>Dose to take now!</Paragraph>\n                    </Box>\n                    :\n                    <Box align=\"center\" background={{\"color\":\"brand\", \"dark\": true}} round=\"medium\" margin={{horizontal: \"large\"}}>\n                        <Paragraph>No doses to take right now. {randomHeaderEmoji}</Paragraph>\n                    </Box>\n                }\n            </Box>\n            <Box margin={{vertical: \"medium\"}} pad={{horizontal: \"large\"}}>\n                <DropButton\n                    icon={<CircleInformation/>}\n                    label=\"How do I use Coherence?\"\n                    dropContent={\n                        <Box pad={{horizontal: \"small\"}}>\n                            <Paragraph textAlign=\"center\">Texting commands</Paragraph>\n                            <Grid columns={[\"xsmall\", \"small\"]} align=\"center\" justifyContent=\"center\" gap={{column: \"small\"}}>\n                                <Paragraph size=\"small\">T, taken</Paragraph>\n                                <Paragraph size=\"small\">Mark your medication as taken at the current time</Paragraph>\n                                <Paragraph size=\"small\">T @ 5:00pm</Paragraph>\n                                <Paragraph size=\"small\">Mark your medication as taken at 5pm</Paragraph>\n                                <Paragraph size=\"small\">S, skip</Paragraph>\n                                <Paragraph size=\"small\">Skip the current dose</Paragraph>\n                                <Paragraph size=\"small\">1</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by ten minutes</Paragraph>\n                                <Paragraph size=\"small\">2</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by half an hour</Paragraph>\n                                <Paragraph size=\"small\">3</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by an hour</Paragraph>\n                                <Paragraph size=\"small\">20, 20 min</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by 20 minutes</Paragraph>\n                                <Paragraph size=\"small\">glucose:140, 140 mg/dL</Paragraph>\n                                <Paragraph size=\"small\">Record glucose reading</Paragraph>\n                                <Paragraph size=\"small\">weight:150, 150 pounds, 150 lb</Paragraph>\n                                <Paragraph size=\"small\">Record weight reading</Paragraph>\n                                <Paragraph size=\"small\">120/80, 120 80</Paragraph>\n                                <Paragraph size=\"small\">Record blood pressure reading</Paragraph>\n                                <Paragraph size=\"small\">W, website, site</Paragraph>\n                                <Paragraph size=\"small\">Get the website link sent to you</Paragraph>\n                                <Paragraph size=\"small\">Eating, going for a walk</Paragraph>\n                                <Paragraph size=\"small\">Tell Coherence you're busy with an activity</Paragraph>\n                                <Paragraph size=\"small\">X</Paragraph>\n                                <Paragraph size=\"small\">Report an error</Paragraph>\n                            </Grid>\n                        </Box>\n                    }\n                    dropAlign={{ top: 'bottom' }}\n                />\n            </Box>\n            <Box pad=\"medium\" background={{color: \"light-3\"}}>\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}} fill={true}>Medication history</Paragraph>\n                <Calendar\n                    date={dateToDisplay.toISO()}\n                    fill={true}\n                    onSelect={(date) => {\n                        const dt = DateTime.fromISO(date);\n                        setSelectedDay(dt.day);\n                        if (impersonateOptions === null) {\n                            trackViewedDayDetails(patientData.patientId);\n                        }\n                    }}\n                    showAdjacentDays={false}\n                    bounds={dateRange.map((date) => {return date.toString()})}\n                    children={renderDay}\n                    daysOfWeek={true}\n                    onReference={(date) => {\n                        setCalendarMonth(DateTime.fromISO(date).month);\n                        setPatientData({...patientData, eventData: []}); // hide event data while we load\n                    }}\n                    animate={false}\n                />\n            </Box>\n            {selectedDay && (\n                <Layer\n                    onEsc={() => setSelectedDay(false)}\n                    onClickOutside={() => setSelectedDay(false)}\n                    responsive={false}\n                >\n                    <Box width=\"70vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">{DateTime.local().set({month: calendarMonth}).monthLong} {selectedDay}</Paragraph>\n                            <Button icon={<Close />} onClick={() => setSelectedDay(false)} />\n                        </Box>\n                        {\n                            patientData.eventData[selectedDay - 1].day_status ?\n                            Object.keys(patientData.eventData[selectedDay - 1].time_of_day).sort(orderDays).map((key) => {\n                                let numberSuffix = patientData.eventData[selectedDay - 1].time_of_day[key].length > 1;  // handle multiple dose windows in the same time of day\n                                return (\n                                    patientData.eventData[selectedDay - 1].time_of_day[key].map((event, index) => {\n                                        return (\n                                            <>\n                                                <Paragraph key={`tod-${key}`} margin={{bottom: \"none\"}}>{key} dose{numberSuffix ? ` ${index + 1}` : ''}</Paragraph>\n                                                <Box key={`todStatusContainer-${key}`} pad={{left: \"medium\"}} direction=\"row\" align=\"center\" justify=\"between\">\n                                                    <Paragraph key={`todStatus-${key}`} size=\"small\">\n                                                        {event.type}{event.time ? ` at ${DateTime.fromJSDate(new Date(event.time)).toLocaleString(DateTime.TIME_SIMPLE)}` : ''}\n                                                    </Paragraph>\n                                                    {event.type === \"taken\" ? <Checkmark color=\"status-ok\" size=\"small\"/> : null}\n                                                    {event.type === \"skipped\" ? <Clear color=\"status-warning\" size=\"small\"/> : null}\n                                                    {event.type === \"missed\" ? <Close color=\"status-error\" size=\"small\"/> : null}\n                                                </Box>\n                                            </>\n                                        )\n                                    })\n                                )\n                            }) :\n                            <Paragraph>No data for this day.</Paragraph>\n                        }\n                    </Box>\n                </Layer>\n            )}\n            <Box align=\"center\" background=\"brand\" pad={{bottom: \"large\"}}>\n                <Paragraph margin={{bottom: \"none\"}}>Health tracking</Paragraph>\n                {Object.keys(formattedHealthMetricData).length === 0 ?\n                    <>\n                        <Paragraph size=\"small\">You're not tracking any health metrics yet.</Paragraph>\n                        <Paragraph size=\"small\" textAlign=\"center\">Tracking is a brand new feature that allows you to text us health data such as blood pressure, weight, or glucose. You can then view your historical data here at any time.</Paragraph>\n                    </>\n                : null}\n                {Object.keys(formattedHealthMetricData).length !== 0 ?\n                <Box margin={{top: \"small\"}}>\n                    <Select\n                        options={[{label: \"week\", value: 7}, {label: \"month\", value: 30}, {label: \"3 months\", value: 90}, {label: \"year\", value: 365}, {label: \"all time\", value: null}]}\n                        children={(option) => {return <Paragraph margin=\"small\">{option.label}</Paragraph>}}\n                        onChange={({value}) => { setTimeRange(value)}}\n                        valueLabel={<Paragraph margin={{vertical: \"xsmall\", horizontal: \"small\"}}>{timeRange.label}</Paragraph>}\n                        // labelKey=\"label\"\n                    />\n                </Box> : null}\n                {formattedHealthMetricData && \"blood pressure\" in formattedHealthMetricData ? (\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Blood pressure</Paragraph>\n                        {formattedHealthMetricData[\"blood pressure\"].datasets[0].data.length > 0 ?\n                            <Scatter data={{datasets: formattedHealthMetricData[\"blood pressure\"].datasets}} options={formattedHealthMetricData[\"blood pressure\"].options}/> :\n                            <Paragraph alignSelf=\"center\" size=\"small\">No blood pressure data recorded yet. Example texts you can send: \"120/80\", \"120 80\".</Paragraph>\n                        }\n                    </Box>) : null}\n                {formattedHealthMetricData && \"weight\" in formattedHealthMetricData ?\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Weight</Paragraph>\n                        {formattedHealthMetricData.weight.datasets[0].data.length > 0 ?\n                        <Scatter data={{datasets: formattedHealthMetricData.weight.datasets}} options={formattedHealthMetricData.weight.options}/> :\n                        <Paragraph alignSelf=\"center\" size=\"small\">No weight data recorded yet. Example texts you can send: \"weight:150\", \"150 lb\", \"150 pounds\".</Paragraph>}\n                    </Box>\n                    : null}\n                {formattedHealthMetricData && \"glucose\" in formattedHealthMetricData ?\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Glucose</Paragraph>\n                        {formattedHealthMetricData.glucose.datasets[0].data.length > 0 ?\n                        <Scatter data={{datasets: formattedHealthMetricData.glucose.datasets}} options={formattedHealthMetricData.glucose.options}/> :\n                        <Paragraph alignSelf=\"center\" size=\"small\">No glucose data recorded yet. Example texts you can send: \"glucose:140\", \"140 mg/dL\"</Paragraph>}\n                    </Box>\n                    : null}\n                <Button label={Object.keys(formattedHealthMetricData).length === 0 ? \"Start tracking\": \"Edit tracking\"} onClick={() => {\n                    setEditingHealthTracking(Object.keys(formattedHealthMetricData));\n                    if (impersonateOptions === null) {\n                        trackStartEditingHealthMetrics(patientData.patientId);\n                    }\n                }} margin={{top: \"medium\"}}/>\n            </Box>\n            {editingHealthTracking !== null ?\n                <Layer\n                    onEsc={() => setEditingHealthTracking(null)}\n                    onClickOutside={() => setEditingHealthTracking(null)}\n                    responsive={false}\n                >\n                    <Box width=\"70vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Choose what you want to track</Paragraph>\n                            <Button icon={<Close />} onClick={() => setEditingHealthTracking(null)} />\n                        </Box>\n                        <CheckBoxGroup\n                            options={[\"blood pressure\", \"weight\", \"glucose\"]}\n                            value={editingHealthTracking}\n                            onChange={(e) => {setEditingHealthTracking(e.value)}}\n                        />\n                        <AnimatingButton animating={animating} label=\"Save changes\" margin={{top:\"medium\"}} onClick={async () => {\n                            setAnimating(true);\n                            console.log(editingHealthTracking);\n                            await setHealthMetricsTracking(editingHealthTracking);\n                            await loadData();\n                            setEditingHealthTracking(null);\n                            if (impersonateOptions === null) {\n                                trackSubmitEditingHealthMetrics(patientData.patientId);\n                            }\n                        }}/>\n                    </Box>\n                </Layer> : null\n            }\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"bottom\">\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Dose windows</Paragraph>\n                    {\n                        patientData ? patientData.doseWindows.map((dw) => {\n                            const startTime = DateTime.utc(2021, 5, 1, dw.start_hour, dw.start_minute);\n                            const endTime = DateTime.utc(2021, 5, 1, dw.end_hour, dw.end_minute);\n                            return (\n                                <Grid key={`doseWindowContainer-${dw.id}`} columns={[\"small\", \"flex\", \"flex\"]} align=\"center\" pad={{horizontal: \"large\"}} alignContent=\"center\" justifyContent=\"center\" justify=\"center\">\n                                    <Box direction=\"row\" align=\"center\">\n                                        <Paragraph>{startTime.setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                        <FormNextLink/>\n                                        <Paragraph>{endTime.setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                    </Box>\n                                    <Button label=\"edit\" onClick={() => {\n                                        setEditingDoseWindow(dw);\n                                        if (impersonateOptions === null) {\n                                            trackStartEditingDoseWindow(patientData.patientId);\n                                        }\n                                    }} size=\"small\" margin={{horizontal: \"none\"}}/>\n                                </Grid>\n                            )\n                        }) : null\n                    }\n                    <Button label=\"Add dose window\" onClick={() => {\n                        setEditingDoseWindow({start_hour: 0, start_minute:0, end_hour: 0, end_minute: 0});\n                        if (impersonateOptions === null) {\n                            trackStartAddingDoseWindow(patientData.patientId);\n                        }\n                    }} icon={<Add/>}/>\n            </Box>\n            {editingDoseWindow && (\n                <Layer\n                    onEsc={() => setEditingDoseWindow(null)}\n                    onClickOutside={() => setEditingDoseWindow(null)}\n                    responsive={false}\n                >\n                    <Box width=\"90vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Edit dose window</Paragraph>\n                            <Button icon={<Close />} onClick={() => setEditingDoseWindow(null)} />\n                        </Box>\n                        <Box>\n                            {renderDoseWindowEditFields(editingDoseWindow)}\n                        </Box>\n                    </Box>\n                </Layer>\n            )}\n            {deletingDoseWindow && (\n                <Layer\n                    onEsc={() => setDeletingDoseWindow(null)}\n                    onClickOutside={() => setDeletingDoseWindow(null)}\n                    responsive={false}\n                >\n                    <Box width=\"90vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Confirm delete dose window</Paragraph>\n                            <Button icon={<Close />} onClick={() => setDeletingDoseWindow(null)}/>\n                        </Box>\n                        <Box align=\"center\">\n                            <Paragraph margin={{bottom: \"none\"}}>You're about to delete the dose window</Paragraph>\n                            <Box direction=\"row\" align=\"center\" margin={{bottom: \"medium\"}}>\n                                <Paragraph>{DateTime.utc(2021, 5, 1, deletingDoseWindow.start_hour, deletingDoseWindow.start_minute).setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                <FormNextLink/>\n                                <Paragraph>{DateTime.utc(2021, 5, 1, deletingDoseWindow.end_hour, deletingDoseWindow.end_minute).setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                            </Box>\n                            <AnimatingButton onClick={async () => {\n                                setAnimating(true);\n                                await deleteDoseWindow(deletingDoseWindow.id)\n                                await loadData();\n                                setDeletingDoseWindow(null);\n                                setEditingDoseWindow(null);\n                                if (impersonateOptions === null) {\n                                    trackSubmitDeletingDoseWindow(patientData.patientId);\n                                }\n                            }} label=\"Confirm\" animating={animating}/>\n                        </Box>\n                    </Box>\n                </Layer>\n            )}\n            <Box align=\"center\" pad={{vertical: \"medium\"}}>\n                {patientData ?\n                <>\n                    <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Pause / resume Coherence</Paragraph>\n                    <Paragraph size=\"small\" color=\"dark-3\">Coherence is currently {patientData.pausedService ? \"paused\" : \"active\"}.</Paragraph>\n                    <AnimatingButton\n                        background={patientData.pausedService ? {\"dark\": true} : null}\n                        animating={animating}\n                        style={{padding: \"10px\"}}\n                        primary={patientData.pausedService}\n                        onClick={async () => {\n                            setAnimating(true);\n                            if (patientData.pausedService) {\n                                await resumeUser();\n                                if (impersonateOptions === null) {\n                                    trackResumedService(patientData.patientId);\n                                }\n                            } else {\n                                await pauseUser();\n                                if (impersonateOptions === null) {\n                                    trackPausedService(patientData.patientId);\n                                }\n                            }\n                            loadData();\n                        }} label={`${patientData.pausedService ? \"Resume\" : \"Pause\"} Coherence`} />\n                    {patientData.pausedService ? <Paragraph size=\"small\" color=\"status-warning\" textAlign=\"center\">While Coherence is paused, we can't respond to any texts you send us, or remind you about your medications.</Paragraph> : null}\n                </> : null}\n            </Box>\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"top\">\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Need help with anything?</Paragraph>\n                <Paragraph size=\"small\" color=\"dark-3\">Our customer service is just a text away at (650) 667-1146. Reach out any time and we'll get back to you in a few hours!</Paragraph>\n            </Box>\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"top\">\n                <Button onClick={logout} label=\"Log out\" />\n            </Box>\n        </Box>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { login } from \"../api\";\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport { Box, Paragraph, Heading, Button, TextInput } from \"grommet\";\nimport { Phone, Login, Fireball, Lock } from \"grommet-icons\";\n\nconst Intro = () => {\n    const [phoneNumber, setPhoneNumber] = React.useState(\"\");\n    const [secretCode, setSecretCode] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [passwordConfirm, setPasswordConfirm] = React.useState(\"\");\n    const [componentToDisplay, setComponentToDisplay] = React.useState(\"phoneNumber\");\n    const [cookies, setCookie] = useCookies([\"token\"]);\n    const [authError, setAuthError] = React.useState(false);\n    const submitAll = React.useCallback(async () => {\n        const response = await login(phoneNumber, secretCode, password);\n        if (response === null) {\n            setAuthError(true);\n        } else {\n            if (response.status === \"success\") {\n                console.log(\"setting cookie\");\n                setCookie(\"token\", response.token, {secure: true});\n                if (response.state === \"payment_method_requested\") {\n                    return <Redirect to=\"/payment\"/>\n                }\n            }\n            setComponentToDisplay(response.status);\n            setAuthError(false);\n        }\n    }, [password, phoneNumber, secretCode, setCookie])\n    const getInputField = React.useCallback(() => {\n        if (componentToDisplay === \"phoneNumber\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Enter phone number.</Paragraph>\n                <TextInput\n                    icon={<Phone/>}\n                    placeholder=\"(555) 555-5555\"\n                    size=\"small\"\n                    value={phoneNumber}\n                    onChange={(event) => {setPhoneNumber(event.target.value)}}\n                />\n                {authError ? <Paragraph size=\"small\">Invalid phone number.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"2fa\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">We've texted you a secret code, enter it below.</Paragraph>\n                <TextInput\n                    icon={<Fireball />}\n                    placeholder=\"123456\"\n                    size=\"small\"\n                    value={secretCode}\n                    onChange={(event) => {setSecretCode(event.target.value)}}\n                />\n                {authError ? <Paragraph size=\"small\">Invalid secret code.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"password\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Enter password.</Paragraph>\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"•••••••••\"\n                    size=\"small\"\n                    value={password}\n                    onChange={(event) => {\n                        setPassword(event.target.value);\n                        setPasswordConfirm(event.target.value);\n                    }}\n                    type=\"password\"\n                />\n                {authError ? <Paragraph size=\"small\">Invalid password. If you'd like us to reset it, give us a text at (650) 667-1146.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"register\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Create your password.</Paragraph>\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"Enter password\"\n                    size=\"small\"\n                    value={password}\n                    onChange={(event) => {setPassword(event.target.value)}}\n                    type=\"password\"\n                />\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"Type it again\"\n                    size=\"small\"\n                    value={passwordConfirm}\n                    onChange={(event) => {setPasswordConfirm(event.target.value)}}\n                    type=\"password\"\n                />\n                {password !== passwordConfirm ? <Paragraph size=\"small\">Passwords don't match.</Paragraph> : null}\n            </>\n        }\n    }, [authError, componentToDisplay, password, passwordConfirm, phoneNumber, secretCode])\n    if (cookies.token) {\n        return <Redirect to=\"/\"/>;\n    }\n    return (\n        <Box height=\"100vh\" flex=\"grow\" background={{\"position\":\"center\",\"dark\":false,\"opacity\":\"strong\"}}>\n            <Box height=\"40vh\" align=\"center\" justify=\"center\" pad=\"large\">\n                <Paragraph>welcome to</Paragraph>\n                <Heading>coherence</Heading>\n            </Box>\n            <Box height=\"60vh\" align=\"center\" justify=\"between\" background={{color: \"brand\", dark: true}} pad=\"large\">\n                <Paragraph color=\"white\" textAlign=\"center\">Peace of mind with your medications is just around the corner.</Paragraph>\n                <Box>\n                    <Box width=\"200px\" margin={{bottom: \"medium\", top: \"xsmall\"}}>\n                        {getInputField()}\n                    </Box>\n                    <Button label=\"submit\" icon={<Login/>} onClick={submitAll} disabled={password !== passwordConfirm}/>\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n\nexport default Intro;","import React from \"react\";\nimport {\n    CardElement,\n    useStripe,\n    useElements,\n  } from '@stripe/react-stripe-js';\nimport AnimatingButton from \"../components/AnimatingButton\";\nimport { Paragraph, Spinner } from \"grommet\";\nimport { submitPaymentInfo } from \"../api\";\n\nconst StripeCardEntry = ({submitText, clientSecret, afterSubmitAction}) => {\n    const stripe = useStripe();\n    const elements = useElements();\n    const [validatingCard, setValidatingCard] = React.useState(false);\n    if (!stripe || !elements) {\n        // Stripe.js has not loaded yet. Make sure to disable\n        // form submission until Stripe.js has loaded.\n        return <Spinner />;\n    }\n\n    // Use card Element to tokenize payment details\n    const submitPayment = async () => {\n        const cardElement = elements.getElement(CardElement);\n        setValidatingCard(true);\n        let { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: cardElement,\n                billing_details: {\n                    name: \"Peter Lu\"\n                },\n            },\n            setup_future_usage: \"off_session\"  // allows us to charge card while not in checkout flow\n        });\n        setValidatingCard(false);\n        console.log(error);\n        console.log(paymentIntent);\n    }\n    return (\n        <>\n            <CardElement />\n            <AnimatingButton\n                label={submitText ? submitText : \"Save payment information\"}\n                onClick={async () => {\n                    await submitPaymentInfo(); // submits to our backend\n                    await submitPayment();  // submits to stripe\n                    afterSubmitAction();  // any reloading that needs to be done after submitting payment info\n                }}\n                animating={validatingCard}\n            />\n            {validatingCard ? <Paragraph>Submitting your payment information. Please do not close this window.</Paragraph> : null}\n        </>\n    )\n}\n\nexport default StripeCardEntry;","import React from \"react\";\nimport { Box, Button, Heading, Paragraph, Spinner } from \"grommet\";\nimport { pullPatientPaymentData } from \"../api\";\nimport { useCookies } from 'react-cookie';\nimport { useHistory } from \"react-router-dom\";\n\nimport { DateTime } from \"luxon\";\nimport { Elements } from '@stripe/react-stripe-js';\n\nimport {loadStripe} from '@stripe/stripe-js';\n\nimport StripeCardEntry from \"../components/StripeCardEntry\";\n\nconst Payment = () => {\n      // Initialize an instance of stripe.\n\n    const [loading, setLoading] = React.useState(true);\n    const [paymentData, setPaymentData] = React.useState(null);\n    const [_, __, removeCookie] = useCookies(['token']);\n    const history = useHistory();\n    const loadData = React.useCallback(async () => {\n        setLoading(true);\n        let loadedData = await pullPatientPaymentData();\n        if (loadedData === null) {\n            removeCookie(\"token\");\n            history.push(\"/login\");\n        }\n        console.log(loadedData.state);\n        if ([\"paused\", \"active\"].includes(loadedData.state)) {\n            history.push(\"/\");\n        }\n        if ([\"intro\", \"dose_windows_requested\", \"dose_window_times_requested\", \"timezone_requested\"].includes(loadedData.state)) {\n            history.push(\"/finishOnboarding\");\n        }\n        console.log(loadedData);\n        setPaymentData(loadedData);\n        setLoading(false);\n    }, [history, removeCookie]);\n\n    React.useEffect(() => {\n        if (loading) {\n            loadData();\n        }\n    }, [loadData, loading])\n\n    if (loading) {\n        return <Spinner />\n    }\n\n    if (paymentData.state === 'payment_method_requested') {\n        const stripePromise = loadStripe(paymentData.publishable_key);\n        return (\n            <Elements stripe={stripePromise}>\n                <Box padding=\"large\">\n                    <Heading size=\"small\">Enter payment information</Heading>\n                    <Paragraph>Looking forward to helping you with your medication. If you have any questions before signing up, please reach out to us over text at (650) 667-1146.</Paragraph>\n                    <StripeCardEntry\n                        submitText=\"Start Coherence subscription ($6.99)\"\n                        clientSecret={paymentData.client_secret}\n                        afterSubmitAction={loadData}\n                    />\n                </Box>\n            </Elements>\n        );\n    } else if (paymentData.state === \"payment_verification_pending\") {\n        return <Paragraph>We're verifying your payment information. You'll get a text when you're verified with further instructions. Thanks for your patience!</Paragraph>\n    } else if (paymentData.state === \"subscription_expired\") {\n        return (\n            <Box>\n                <Paragraph>Your subscription ended on {DateTime.fromHTTP(paymentData.subscription_end_date).toLocaleString(DateTime.DATE_MED)}.</Paragraph>\n                <Button label=\"Renew for $6.99\"/>\n            </Box>\n        );\n\n    } else {\n        return (\n            <Box>\n                <Paragraph>Your subscription status: active</Paragraph>\n                <Paragraph>expires on {DateTime.fromHTTP(paymentData.subscription_end_date).toLocaleString(DateTime.DATE_MED)}</Paragraph>\n            </Box>\n        );\n    }\n}\n\nexport default Payment;","import React from \"react\";\n\nimport { Paragraph } from \"grommet\";\n\nconst FinishOnboarding = () => {\n    return <Paragraph>Finish onboarding over text before continuing.</Paragraph>\n}\n\nexport default FinishOnboarding;","import './App.css';\nimport Home from './pages/Home';\nimport Intro from './pages/Intro';\nimport Payment from './pages/Payment';\nimport FinishOnboarding from './pages/FinishOnboarding';\n\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\n\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path={'/'} render={() => <Home />}/>\n            <Route exact path={'/login'} render={() => <Intro />}/>\n            <Route exact path={'/payment'} render={() => <Payment />}/>\n            <Route exact path={'/finishOnboarding'} render={() => <FinishOnboarding />}/>\n        </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CookiesProvider } from 'react-cookie';\nimport { Grommet } from \"grommet\";\n\nconst grommetTheme = {\n  global: {\n    colors: {\n      brand: \"#002864\",\n      text: {light: \"#002864\"},\n      paragraph: {light: \"#002864\"},\n      background: \"#FFF\"\n    }\n  },\n  spinner: {\n    container: {\n      color: {\n        light: \"#002864\",\n        dark: \"FFF\"\n      }\n    }\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <Grommet theme={grommetTheme} themeMode=\"light\">\n        <App />\n      </Grommet>\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}