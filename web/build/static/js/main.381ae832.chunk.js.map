{"version":3,"sources":["api.js","components/TimeInput.js","components/AnimatingButton.js","pages/Home.js","pages/Intro.js","App.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","console","log","process","apiServer","trim","post","route","payload","a","token","get","headers","Accept","Authorization","btoa","fetch","method","body","JSON","stringify","fetchResult","ok","text","parse","status","params","url","qs","login","phoneNumber","secretCode","password","response","pullPatientData","calendarMonth","pullPatientDataForNumber","updateDoseWindow","updatedDoseWindow","pauseUser","resumeUser","TimeInput","value","onChangeTime","React","useState","hour","setHour","minute","setMinute","Box","direction","Select","options","plain","onChange","newHour","toString","parseInt","AnimatingButton","animating","props","Button","disabled","Spinner","color","children","Home","useCookies","setCookie","removeCookie","patientData","setPatientData","setCalendarMonth","impersonateOptions","setImpersonateOptions","impersonating","setImpersonating","selectedDay","setSelectedDay","editingDoseWindow","setEditingDoseWindow","setAnimating","dateRange","DateTime","local","loadData","useCallback","loadedData","secure","impersonateList","map","tuple_data","label","shouldRerender","useMemo","month","useEffect","renderDay","date","dayColor","dt","fromJSDate","day","eventData","length","dayOfMonthData","day_status","align","justify","margin","vertical","width","height","round","background","Paragraph","renderImpersonateListItem","listItem","nextDayConversion","plus","days","validDoseWindows","editingStartTime","utc","start_hour","start_minute","setZone","set","editingEndTime","end_hour","end_minute","minutes","doseWindows","dw","id","existingStartTime","existingEndTime","currentTimeOfDay","currentTime","dateToDisplay","currentDay","randomHeaderEmoji","arr","Math","floor","random","renderDoseWindowEditFields","startTime","endTime","newTime","newDwTime","onClick","to","gap","pad","option","Heading","size","patientName","doseToTakeNow","horizontal","animation","alignSelf","DropButton","icon","CircleInformation","dropContent","textAlign","Grid","columns","dropAlign","top","fill","Calendar","toISO","onSelect","fromISO","showAdjacentDays","bounds","daysOfWeek","onReference","animate","Layer","onEsc","onClickOutside","responsive","monthLong","Close","Object","keys","time_of_day","sort","t1","t2","key","event","bottom","left","type","time","Date","toLocaleString","TIME_SIMPLE","Checkmark","Clear","border","alignContent","justifyContent","FormNextLink","pausedService","style","padding","primary","Intro","setPhoneNumber","setSecretCode","setPassword","passwordConfirm","setPasswordConfirm","componentToDisplay","setComponentToDisplay","authError","setAuthError","submitAll","getInputField","TextInput","Phone","placeholder","target","Fireball","Lock","flex","dark","Login","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CookiesProvider","Grommet","theme","global","colors","brand","light","paragraph","spinner","container","themeMode","document","getElementById"],"mappings":"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","file":"static/js/main.381ae832.chunk.js","sourcesContent":["import * as qs from 'query-string';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconsole.log(process.env.NODE_ENV);\nconst apiServer = process.env.NODE_ENV.trim() === \"production\" ? \"https://coherence-chat.herokuapp.com\" : 'http://localhost:5000';\n\nconst post = async (route, payload) => {\n  const token = cookies.get('token');\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    \"Access-Control-Allow_Methods\": \"POST\",\n    \"Access-Control_Allow_Headers\": \"*\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  };\n  if (token) {\n    headers.Authorization = 'Basic ' + btoa(token + \":unused\");\n  }\n  const fetchResult = await fetch(`${apiServer}/${route}`, {\n    method: 'post',\n    headers,\n    body: JSON.stringify(payload),\n  });\n\n  if (fetchResult.ok) {\n    const text = await fetchResult.text();\n    return JSON.parse(text);\n  }\n  console.log(\n    `POST call to /${route} errored with status ${fetchResult.status}`,\n  );\n  return null;\n};\n\nconst get = async (route, params) => {\n  let url = `${apiServer}/${route}`;\n  url += `?${qs.stringify(params)}`;\n\n  const token = cookies.get('token');\n  const headers = {\n    Accept: 'application/json',\n    \"Access-Control-Allow-Methods\": \"GET\",\n    \"Access-Control-Allow-Headers\": \"*\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  };\n  if (token) {\n    headers.Authorization = 'Basic ' + btoa(token + \":unused\");\n  }\n  const fetchResult = await fetch(url, {\n    method: 'get',\n    headers,\n  });\n  if (fetchResult.ok) {\n    const text = await fetchResult.text();\n    return JSON.parse(text);\n  }\n  console.log(\n    `GET call to /${route} errored with status ${fetchResult.status}`,\n  );\n  return null;\n};\n\nexport const login = async (phoneNumber, secretCode, password) => {\n    const response = await post(\"login/new\", { phoneNumber, secretCode, password });\n    return response;\n}\n\nexport const pullPatientData = async (calendarMonth) => {\n  const response = await get(\"patientData/new\", { calendarMonth });\n  return response;\n}\n\nexport const pullPatientDataForNumber = async (phoneNumber, calendarMonth) => {\n  const response = await get(\"patientData/new\", { phoneNumber, calendarMonth });\n  return response;\n}\n\nexport const updateDoseWindow = async (updatedDoseWindow) => {\n  const response = await post(\"doseWindow/update/new\", { updatedDoseWindow });\n  return response;\n}\n\nexport const pauseUser = async () => {\n  const response = await post(\"user/pause/new\");\n  return response;\n}\n\nexport const resumeUser = async () => {\n  const response = await post(\"user/resume/new\");\n  return response;\n}","import React from \"react\";\n\nimport { Box, Select } from \"grommet\";\n\nconst TimeInput = ({value, onChangeTime}) => {\n    const [hour, setHour] = React.useState(value.hour);\n    const [minute, setMinute] = React.useState(value.minute);\n    return (\n        <Box direction=\"row\">\n            <Select options={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]} value={hour > 12 ? hour - 12 : (hour === 0 ? 12 : hour)} plain\n                onChange={\n                    ({value}) => {\n                        let newHour = hour >= 12 ? value + 12 : value % 12;\n                        setHour(newHour);\n                        onChangeTime({hour: newHour, minute});\n                    }\n                }\n            />\n            <Select options={[\"00\", \"15\", \"30\", \"45\"]} value={`${minute === 0 ? '0' : ''}${minute.toString()}`} plain onChange={({value}) => {\n                setMinute(parseInt(value));\n                onChangeTime({hour, minute: parseInt(value)});\n            }}/>\n            <Select options={[\"AM\", \"PM\"]} value={hour >= 12 ? \"PM\" : \"AM\"} plain onChange={({value}) => {\n                let newHour = hour;\n                if (value === \"AM\") {\n                    if (hour >= 12) {\n                        newHour = hour - 12;\n                        setHour(hour - 12);\n                    }\n                } else {\n                    if (hour < 12) {\n                        newHour = hour + 12;\n                        setHour(hour + 12);\n                    }\n                }\n                onChangeTime({hour: newHour, minute});\n            }}/>\n        </Box>\n    )\n}\n\nexport default TimeInput;","import React from \"react\";\nimport { Button, Spinner } from \"grommet\";\nimport { get } from \"lodash\";\n\nconst AnimatingButton = ({animating, ...props}) => {\n    if (animating) {\n        return <Button {...props} disabled={true}><Spinner color={get(props, \"background.dark\", false) ? \"#FFF\" : \"brand\"}/></Button>;\n    } else {\n        return <Button {...props}>{props.children}</Button>;\n    }\n}\n\nexport default AnimatingButton;","import React from \"react\";\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport { pauseUser, pullPatientData, pullPatientDataForNumber, resumeUser, updateDoseWindow } from '../api';\nimport { Box, Button, Calendar, DropButton, Grid, Heading, Layer, Paragraph, Select } from \"grommet\";\nimport { Checkmark, CircleInformation, Clear, Close, FormNextLink} from \"grommet-icons\";\nimport { DateTime } from 'luxon';\nimport TimeInput from \"../components/TimeInput\";\nimport AnimatingButton from \"../components/AnimatingButton\";\n\nconst Home = () => {\n    const [cookies, setCookie, removeCookie] = useCookies(['token']);\n    const [patientData, setPatientData] = React.useState(null);\n    const [calendarMonth, setCalendarMonth] = React.useState(5);\n    const [impersonateOptions, setImpersonateOptions] = React.useState(null);\n    const [impersonating, setImpersonating] = React.useState(null);\n    const [selectedDay, setSelectedDay] = React.useState(null);\n    const [editingDoseWindow, setEditingDoseWindow] = React.useState(null);\n    const [animating, setAnimating] = React.useState(false);  // this is setting animating for ALL buttons for now\n\n    const dateRange = [DateTime.local(2021, 4, 1), DateTime.local(2021, 5, 31)]\n\n    const loadData = React.useCallback(async () => {\n        let loadedData = null;\n        if (impersonating) {\n            loadedData = await pullPatientDataForNumber(impersonating.value, calendarMonth);\n        } else {\n            loadedData = await pullPatientData(calendarMonth);\n        };\n        if (loadedData === null) {\n            removeCookie(\"token\");\n            return;\n        }\n        setPatientData(loadedData);\n        setCookie('token', loadedData.token, {secure: true});  // refresh login token\n        if (loadedData.impersonateList) {\n            setImpersonateOptions(\n                loadedData.impersonateList.map((tuple_data) => { return { label: tuple_data[0], value: tuple_data[1]}})\n            );\n        }\n        setAnimating(false);\n    }, [calendarMonth, impersonating, removeCookie, setCookie])\n\n    const shouldRerender = React.useMemo(() => {\n        if (!cookies.token) {\n            return false;\n        }\n        if (patientData === null) {\n            return true;\n        }\n        if (patientData.month !== calendarMonth) {\n            return true;\n        }\n        if (!!impersonating !== !! patientData.impersonating) {\n            return true;\n        }\n        if (impersonating && patientData.impersonating && patientData.phoneNumber !== impersonating.value) {\n            return true;\n        }\n        return false;\n    }, [calendarMonth, cookies.token, impersonating, patientData]);\n\n    React.useEffect(() => {\n        console.log(\"rerendering\")\n        if (shouldRerender) {\n            loadData();\n        }\n    }, [loadData, shouldRerender]);\n\n    const logout = () => {\n        removeCookie(\"token\");\n    }\n\n    const renderDay = React.useCallback(({date}) => {\n        let dayColor = null;\n        const dt = DateTime.fromJSDate(date);\n        const day = dt.day;\n        if (patientData !== null) {\n            if (patientData.eventData.length >= day) {\n                const dayOfMonthData = patientData.eventData[day - 1];\n                if (dt.month === calendarMonth) {\n                    if (dayOfMonthData.day_status === \"taken\") {\n                        dayColor = \"status-ok\";\n                    } else if (dayOfMonthData.day_status === \"missed\") {\n                        dayColor = \"status-error\";\n                    } else if (dayOfMonthData.day_status === \"skip\") {\n                        dayColor = \"status-warning\";\n                    }\n                }\n            }\n        }\n        return (\n            <Box align=\"center\" justify=\"center\" margin={{vertical: \"xsmall\"}}>\n                <Box width=\"30px\" height=\"30px\" round=\"medium\" background={{color: dayColor}} align=\"center\" justify=\"center\">\n                    <Paragraph>{day}</Paragraph>\n                </Box>\n            </Box>\n        );\n    }, [calendarMonth, patientData]);\n\n    const renderImpersonateListItem = React.useCallback((listItem) => {\n        console.log(listItem);\n        return listItem.label;\n    }, [])\n\n    const nextDayConversion = (dt) => {\n        if (dt.hour < 4) {\n            return dt.plus({days: 1});\n        }\n        return dt;\n    }\n\n    const validDoseWindows = React.useMemo(() => {\n        console.log(\"recomputing\")\n        if (editingDoseWindow === null) {\n            return true; // if you're not editing anything you're valid\n        };\n        if (patientData === null) {\n            return true;  // if we have no patient data your dose windows are fine\n        };\n        const editingStartTime = nextDayConversion(DateTime.utc(2021, 5, 1, editingDoseWindow.start_hour, editingDoseWindow.start_minute).setZone(\"local\").set({month: 5, day: 1}));\n        const editingEndTime = nextDayConversion(DateTime.utc(2021, 5, 1, editingDoseWindow.end_hour, editingDoseWindow.end_minute).setZone(\"local\").set({month: 5, day: 1}));\n        if (editingEndTime < editingStartTime.plus({minutes: 30})) {\n            return false; // dose window is too short\n        }\n        for (const dw of patientData.doseWindows) {\n            if (dw.id === editingDoseWindow.id) {\n                continue;  // we don't compare to the one we're editing\n            }\n            const existingStartTime = nextDayConversion(DateTime.utc(2021, 5, 1, dw.start_hour, dw.start_minute).setZone(\"local\").set({month: 5, day: 1}));\n            const existingEndTime = nextDayConversion(DateTime.utc(2021, 5, 1, dw.end_hour, dw.end_minute).setZone(\"local\").set({month: 5, day: 1}));\n            if (editingStartTime <= existingStartTime && existingStartTime <= editingEndTime) {\n                return false;\n            }\n            if (editingStartTime <= existingEndTime && existingEndTime <= editingEndTime) {\n                return false;\n            }\n        }\n        return true;\n    }, [editingDoseWindow, patientData]);\n\n    const currentTimeOfDay = React.useMemo(() => {\n        const currentTime = DateTime.local();\n        if (currentTime.hour > 4 && currentTime.hour < 12) {\n            return \"morning\";\n        } else if (currentTime.hour > 12 && currentTime.hour < 18) {\n            return \"afternoon\";\n        } else {\n            return \"evening\"\n        }\n    }, []);\n\n    const dateToDisplay = React.useMemo(() => {\n        const currentDay = DateTime.local();\n        if (calendarMonth === currentDay.month) {\n            return currentDay;\n        } else {\n            return currentDay.set({month: calendarMonth, day: 1});\n        }\n    }, [calendarMonth])\n\n    const randomChoice = (arr) => {\n        return arr[Math.floor(arr.length * Math.random())];\n    }\n    const randomHeaderEmoji = React.useMemo(() =>  {\n        return randomChoice([\"💫\", \"🌈\", \"🌱\", \"🏆\", \"📈\", \"💎\", \"💡\", \"🔆\", \"🔔\"]);\n    }, [])\n\n    const renderDoseWindowEditFields = React.useCallback(() => {\n        const startTime = DateTime.utc(2021, 5, 1, editingDoseWindow.start_hour, editingDoseWindow.start_minute);\n        const endTime = DateTime.utc(2021, 5, 1, editingDoseWindow.end_hour, editingDoseWindow.end_minute);\n        return (\n            <>\n                <TimeInput value={startTime.setZone('local')} color=\"dark-3\" onChangeTime={\n                    (newTime) => {\n                        const newDwTime = DateTime.local(2021, 5, 1, newTime.hour, newTime.minute).setZone(\"UTC\");\n                        setEditingDoseWindow({...editingDoseWindow, start_hour: newDwTime.hour, start_minute: newDwTime.minute});\n                    }}\n                />\n                <TimeInput value={endTime.setZone('local')} color=\"dark-3\" onChangeTime={\n                    (newTime) => {\n                        console.log(`changed time to ${JSON.stringify(newTime)}`)\n                        const newDwTime = DateTime.local(2021, 5, 1, newTime.hour, newTime.minute).setZone(\"UTC\");\n                        setEditingDoseWindow({...editingDoseWindow, end_hour: newDwTime.hour, end_minute: newDwTime.minute});\n                    }}\n                />\n                {<AnimatingButton\n                    onClick={() => {\n                        setAnimating(true);\n                        updateDoseWindow(editingDoseWindow);\n                        loadData();\n                        setEditingDoseWindow(null);\n                    }}\n                    label={validDoseWindows ? \"Update\" : \"Invalid dose window\"}\n                    disabled={!validDoseWindows}\n                    animating={animating}\n                />}\n            </>\n        )\n    }, [animating, editingDoseWindow, loadData, validDoseWindows]);\n\n    if (!cookies.token) {\n        return <Redirect to=\"/login\"/>;\n    }\n\n    const orderDays = (t1, t2) => {\n        if (t1 === t2) {\n            return 0;\n        }\n        if (t1 === \"morning\" || (t1 === \"afternoon\" && t2 === \"evening\")) {\n            return -1;\n        }\n        return 1;\n    }\n\n\n    return (\n        // <>\n        //     {cookies.token ? (<p>Logged in!</p>) : <Redirect to=\"/login\"/>}\n        //     <p>{JSON.stringify(patientData)}</p>\n        //     <button onClick={logout}>Logout</button>\n        //     {patientData.impersonateList ? <Select options={impersonateOptions} onChange={(selectedValue) => { loadDataForUser(selectedValue)}}/> : null}\n        //     {impersonating ? <p>Impersonating {impersonating}</p> : null}\n        // </>\n        <Box>\n            {impersonateOptions !== null ?\n                <Box direction=\"row\" align=\"center\" gap=\"small\" pad={{\"horizontal\": \"medium\"}}>\n                    <Paragraph>Impersonating:</Paragraph>\n                    <Select\n                        options={impersonateOptions}\n                        children={renderImpersonateListItem}\n                        onChange={({option}) => {\n                            console.log(\"setting\");\n                            setImpersonating(option);\n                        }}\n                    />\n                </Box> : null}\n            <Box align=\"center\">\n                <Heading size=\"small\">Good {currentTimeOfDay}{patientData ? `, ${patientData.patientName}` : \"\"}.</Heading>\n            </Box>\n            <Box>\n                {patientData && patientData.doseToTakeNow ?\n                    <Box\n                        align=\"center\"\n                        background={{\"color\":\"status-warning\", \"dark\": true}}\n                        round=\"medium\"\n                        margin={{horizontal: \"large\"}}\n                        pad={{vertical: \"medium\"}}\n                        animation={{\"type\":\"pulse\",\"size\":\"medium\",\"duration\":2000}}\n                    >\n                        <Paragraph alignSelf=\"center\" margin={{vertical: \"none\"}}>Dose to take now!</Paragraph>\n                    </Box>\n                    :\n                    <Box align=\"center\" background={{\"color\":\"brand\", \"dark\": true}} round=\"medium\" margin={{horizontal: \"large\"}}>\n                        <Paragraph>No doses to take right now. {randomHeaderEmoji}</Paragraph>\n                    </Box>\n                }\n            </Box>\n            <Box margin={{vertical: \"medium\"}} pad={{horizontal: \"large\"}}>\n                <DropButton\n                    icon={<CircleInformation/>}\n                    label=\"How do I use Coherence?\"\n                    dropContent={\n                        <Box pad={{horizontal: \"small\"}}>\n                            <Paragraph textAlign=\"center\">Texting commands</Paragraph>\n                            <Grid columns={[\"xsmall\", \"small\"]}>\n                                <Paragraph size=\"small\">T, taken</Paragraph>\n                                <Paragraph size=\"small\">Mark your medication as taken at the current time</Paragraph>\n                                <Paragraph size=\"small\">T @ 5:00pm</Paragraph>\n                                <Paragraph size=\"small\">Mark your medication as taken at 5pm</Paragraph>\n                                <Paragraph size=\"small\">S, skip</Paragraph>\n                                <Paragraph size=\"small\">Skip the current dose</Paragraph>\n                                <Paragraph size=\"small\">1</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by ten minutes</Paragraph>\n                                <Paragraph size=\"small\">2</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by half an hour</Paragraph>\n                                <Paragraph size=\"small\">3</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by an hour</Paragraph>\n                                <Paragraph size=\"small\">20, 20 min</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by 20 minutes</Paragraph>\n                                <Paragraph size=\"small\">W, website, site</Paragraph>\n                                <Paragraph size=\"small\">Get the website link sent to you</Paragraph>\n                                <Paragraph size=\"small\">Eating, going for a walk</Paragraph>\n                                <Paragraph size=\"small\">Tell Coherence you're busy with an activity</Paragraph>\n                                <Paragraph size=\"small\">X</Paragraph>\n                                <Paragraph size=\"small\">Report an error</Paragraph>\n                            </Grid>\n                        </Box>\n                    }\n                    dropAlign={{ top: 'bottom' }}\n                />\n            </Box>\n            <Box pad=\"medium\" background={{color: \"light-3\"}}>\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}} fill={true}>Medication history</Paragraph>\n                <Calendar\n                    date={dateToDisplay.toISO()}\n                    fill={true}\n                    onSelect={(date) => {\n                        const dt = DateTime.fromISO(date);\n                        setSelectedDay(dt.day);\n                    }}\n                    showAdjacentDays={false}\n                    bounds={dateRange.map((date) => {return date.toString()})}\n                    children={renderDay}\n                    daysOfWeek={true}\n                    onReference={(date) => {\n                        setCalendarMonth(DateTime.fromISO(date).month);\n                        setPatientData({...patientData, eventData: []}); // hide event data while we load\n                    }}\n                    animate={false}\n                />\n            </Box>\n            {selectedDay && (\n                <Layer\n                    onEsc={() => setSelectedDay(false)}\n                    onClickOutside={() => setSelectedDay(false)}\n                    responsive={false}\n                >\n                    <Box width=\"70vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">{DateTime.local().set({month: calendarMonth}).monthLong} {selectedDay}</Paragraph>\n                            <Button icon={<Close />} onClick={() => setSelectedDay(false)} />\n                        </Box>\n                        {\n                            patientData.eventData[selectedDay - 1].day_status ?\n                            Object.keys(patientData.eventData[selectedDay - 1].time_of_day).sort(orderDays).map((key) => {\n                                const event = patientData.eventData[selectedDay - 1].time_of_day[key][0];\n                                return (\n                                    <>\n                                        <Paragraph key={`tod-${key}`} margin={{bottom: \"none\"}}>{key} dose</Paragraph>\n                                        <Box key={`todStatusContainer-${key}`} pad={{left: \"medium\"}} direction=\"row\" align=\"center\" justify=\"between\">\n                                            <Paragraph key={`todStatus-${key}`} size=\"small\">\n                                                {event.type}{event.time ? ` at ${DateTime.fromJSDate(new Date(event.time)).toLocaleString(DateTime.TIME_SIMPLE)}` : ''}\n                                            </Paragraph>\n                                            {event.type === \"taken\" ? <Checkmark color=\"status-ok\" size=\"small\"/> : null}\n                                            {event.type === \"skipped\" ? <Clear color=\"status-warning\" size=\"small\"/> : null}\n                                            {event.type === \"missed\" ? <Close color=\"status-error\" size=\"small\"/> : null}\n                                        </Box>\n                                    </>\n                                )\n                            }) :\n                            <Paragraph>No data for this day.</Paragraph>\n                        }\n                    </Box>\n                </Layer>\n            )}\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"bottom\">\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Dose windows</Paragraph>\n                    {\n                        patientData ? patientData.doseWindows.map((dw) => {\n                            const startTime = DateTime.utc(2021, 5, 1, dw.start_hour, dw.start_minute);\n                            // startTime.set\n                            const endTime = DateTime.utc(2021, 5, 1, dw.end_hour, dw.end_minute);\n                            return (\n                                <Grid key={`doseWindowContainer-${dw.id}`} columns={[\"small\", \"xsmall\"]} align=\"center\" pad={{horizontal: \"large\"}} alignContent=\"center\" justifyContent=\"center\" justify=\"center\">\n                                    <Box direction=\"row\" align=\"center\">\n                                        <Paragraph>{startTime.setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                        <FormNextLink/>\n                                        <Paragraph>{endTime.setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                    </Box>\n                                    <Button label=\"edit\" onClick={() => setEditingDoseWindow(dw)}/>\n                                </Grid>\n                            )\n                        }) : null\n                    }\n            </Box>\n            {editingDoseWindow && (\n                <Layer\n                    onEsc={() => setEditingDoseWindow(null)}\n                    onClickOutside={() => setEditingDoseWindow(null)}\n                    responsive={false}\n                >\n                    <Box width=\"90vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Edit dose window</Paragraph>\n                            <Button icon={<Close />} onClick={() => setEditingDoseWindow(null)} />\n                        </Box>\n                        <Box>\n                            {renderDoseWindowEditFields(editingDoseWindow)}\n                        </Box>\n                    </Box>\n                </Layer>\n            )}\n            <Box align=\"center\" pad={{vertical: \"medium\"}}>\n                {patientData ?\n                <>\n                    <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Pause / resume Coherence</Paragraph>\n                    <Paragraph size=\"small\" color=\"dark-3\">Coherence is currently {patientData.pausedService ? \"paused\" : \"active\"}.</Paragraph>\n                    <AnimatingButton\n                        background={patientData.pausedService ? {\"dark\": true} : null}\n                        animating={animating}\n                        style={{padding: \"10px\"}}\n                        primary={patientData.pausedService}\n                        // primary={patientData.pausedService}\n                        onClick={async () => {\n                            setAnimating(true);\n                            if (patientData.pausedService) {\n                                await resumeUser();\n                            } else {\n                                await pauseUser();\n                            }\n                            loadData();\n                        }}>{patientData.pausedService ? \"Resume\" : \"Pause\"} Coherence</AnimatingButton>\n                    {patientData.pausedService ? <Paragraph size=\"small\" color=\"status-warning\" textAlign=\"center\">While Coherence is paused, we can't respond to any texts you send us, or remind you about your medications.</Paragraph> : null}\n                </> : null}\n            </Box>\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"top\">\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Need help with anything?</Paragraph>\n                <Paragraph size=\"small\" color=\"dark-3\">Our customer service is just a text away at (650) 667-1146. Reach out any time and we'll get back to you in a few hours!</Paragraph>\n            </Box>\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"top\">\n                <Button onClick={logout}>Log out</Button>\n            </Box>\n        </Box>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { login } from \"../api\";\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport { Box, Paragraph, Heading, Button, TextInput } from \"grommet\";\nimport { Phone, Login, Fireball, Lock } from \"grommet-icons\";\n\nconst Intro = () => {\n    const [phoneNumber, setPhoneNumber] = React.useState(\"\");\n    const [secretCode, setSecretCode] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [passwordConfirm, setPasswordConfirm] = React.useState(\"\");\n    const [componentToDisplay, setComponentToDisplay] = React.useState(\"phoneNumber\");\n    const [cookies, setCookie] = useCookies([\"token\"]);\n    const [authError, setAuthError] = React.useState(false);\n    const submitAll = React.useCallback(async () => {\n        const response = await login(phoneNumber, secretCode, password);\n        if (response === null) {\n            setAuthError(true);\n        } else {\n            if (response.status === \"success\") {\n                console.log(\"setting cookie\");\n                setCookie(\"token\", response.token, {secure: true});\n            }\n            setComponentToDisplay(response.status);\n            setAuthError(false);\n        }\n    }, [password, phoneNumber, secretCode, setCookie])\n    const getInputField = React.useCallback(() => {\n        if (componentToDisplay === \"phoneNumber\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Enter phone number.</Paragraph>\n                <TextInput\n                    icon={<Phone/>}\n                    placeholder=\"(555) 555-5555\"\n                    size=\"small\"\n                    value={phoneNumber}\n                    onChange={(event) => {setPhoneNumber(event.target.value)}}\n                />\n                {authError ? <Paragraph size=\"small\">Invalid phone number.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"2fa\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">We've texted you a secret code, enter it below.</Paragraph>\n                <TextInput\n                    icon={<Fireball />}\n                    placeholder=\"123456\"\n                    size=\"small\"\n                    value={secretCode}\n                    onChange={(event) => {setSecretCode(event.target.value)}}\n                />\n                {authError ? <Paragraph size=\"small\">Invalid secret code.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"password\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Enter password.</Paragraph>\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"•••••••••\"\n                    size=\"small\"\n                    value={password}\n                    onChange={(event) => {\n                        setPassword(event.target.value);\n                        setPasswordConfirm(event.target.value);\n                    }}\n                    type=\"password\"\n                />\n                {authError ? <Paragraph size=\"small\">Invalid password. If you'd like us to reset it, give us a text at (650) 667-1146.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"register\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Create your password.</Paragraph>\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"Enter password\"\n                    size=\"small\"\n                    value={password}\n                    onChange={(event) => {setPassword(event.target.value)}}\n                    type=\"password\"\n                />\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"Type it again\"\n                    size=\"small\"\n                    value={passwordConfirm}\n                    onChange={(event) => {setPasswordConfirm(event.target.value)}}\n                    type=\"password\"\n                />\n                {password !== passwordConfirm ? <Paragraph size=\"small\">Passwords don't match.</Paragraph> : null}\n            </>\n        }\n    }, [authError, componentToDisplay, password, passwordConfirm, phoneNumber, secretCode])\n    if (cookies.token) {\n        return <Redirect to=\"/\"/>;\n    }\n    return (\n        <Box height=\"100vh\" flex=\"grow\" background={{\"position\":\"center\",\"dark\":false,\"opacity\":\"strong\"}}>\n            <Box height=\"40vh\" align=\"center\" justify=\"center\" pad=\"large\">\n                <Paragraph>welcome to</Paragraph>\n                <Heading>coherence</Heading>\n            </Box>\n            <Box height=\"60vh\" align=\"center\" justify=\"between\" background={{color: \"brand\", dark: true}} pad=\"large\">\n                <Paragraph color=\"white\" textAlign=\"center\">Peace of mind with your medications is just around the corner.</Paragraph>\n                <Box>\n                    <Box width=\"200px\" margin={{bottom: \"medium\", top: \"xsmall\"}}>\n                        {getInputField()}\n                    </Box>\n                    <Button label=\"submit\" icon={<Login/>} onClick={submitAll} disabled={password !== passwordConfirm}/>\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n\nexport default Intro;","import './App.css';\nimport Home from './pages/Home';\nimport Intro from './pages/Intro';\n\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path={'/'} render={() => <Home />}/>\n            <Route exact path={'/login'} render={() => <Intro />}/>\n        </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CookiesProvider } from 'react-cookie';\nimport { Grommet } from \"grommet\";\n\nconst grommetTheme = {\n  global: {\n    colors: {\n      brand: \"#002864\",\n      text: {light: \"#002864\"},\n      paragraph: {light: \"#002864\"},\n      background: \"#FFF\"\n    }\n  },\n  spinner: {\n    container: {\n      color: {\n        light: \"#002864\",\n        dark: \"FFF\"\n      }\n    }\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <Grommet theme={grommetTheme} themeMode=\"light\">\n        <App />\n      </Grommet>\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}