{"version":3,"sources":["api.js","analytics.js","components/TimeInput.js","components/AnimatingButton.js","pages/Home.js","pages/Intro.js","App.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","console","log","process","apiServer","trim","post","route","payload","a","token","get","headers","Accept","Authorization","btoa","fetch","method","body","JSON","stringify","fetchResult","ok","text","parse","status","params","url","qs","login","phoneNumber","secretCode","password","response","pullPatientData","calendarMonth","pullPatientDataForNumber","updateDoseWindow","updatedDoseWindow","deleteDoseWindow","dwId","doseWindowId","pauseUser","resumeUser","setHealthMetricsTracking","metricList","ReactGA","initialize","trackPausedService","userId","event","category","action","value","TimeInput","onChangeTime","React","useState","hour","setHour","minute","setMinute","Box","direction","Select","options","plain","onChange","newHour","toString","parseInt","AnimatingButton","animating","props","Button","alignSelf","label","disabled","Spinner","color","children","Home","useCookies","setCookie","removeCookie","patientData","setPatientData","setCalendarMonth","impersonateOptions","setImpersonateOptions","impersonating","setImpersonating","selectedDay","setSelectedDay","editingDoseWindow","setEditingDoseWindow","deletingDoseWindow","setDeletingDoseWindow","editingHealthTracking","setEditingHealthTracking","setAnimating","dateRange","DateTime","local","loadData","useCallback","loadedData","id","secure","impersonateList","map","tuple_data","shouldRerender","useMemo","month","useEffect","renderDay","date","dayColor","dt","fromJSDate","day","eventData","length","dayOfMonthData","day_status","align","justify","margin","vertical","width","height","round","background","Paragraph","units","weight","glucose","formattedHealthMetricData","data","metric","healthMetricData","metric_list","datasets","x","fromHTTP","time","y","fill","backgroundColor","borderColor","scales","type","unit","grid","ticks","title","display","plugins","legend","showLine","systolic","diastolic","datalabels","renderImpersonateListItem","listItem","nextDayConversion","plus","days","validDoseWindows","editingStartTime","utc","start_hour","start_minute","setZone","set","editingEndTime","end_hour","end_minute","minutes","doseWindows","dw","existingStartTime","existingEndTime","currentTimeOfDay","currentTime","dateToDisplay","currentDay","randomHeaderEmoji","arr","Math","floor","random","renderDoseWindowEditFields","startTime","endTime","size","bottom","newTime","newDwTime","onClick","to","gap","pad","option","Heading","patientName","takeNow","horizontal","animation","DropButton","icon","CircleInformation","dropContent","textAlign","Grid","columns","justifyContent","column","dropAlign","top","Calendar","toISO","onSelect","fromISO","showAdjacentDays","bounds","daysOfWeek","onReference","animate","Layer","onEsc","onClickOutside","responsive","monthLong","Close","Object","keys","time_of_day","sort","t1","t2","key","numberSuffix","index","left","Date","toLocaleString","TIME_SIMPLE","Checkmark","Clear","CheckBoxGroup","e","border","alignContent","FormNextLink","padding","Add","pausedService","style","primary","Intro","setPhoneNumber","setSecretCode","setPassword","passwordConfirm","setPasswordConfirm","componentToDisplay","setComponentToDisplay","authError","setAuthError","submitAll","getInputField","TextInput","Phone","placeholder","target","Fireball","Lock","flex","dark","Login","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CookiesProvider","Grommet","theme","global","colors","brand","light","paragraph","spinner","container","themeMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad9f1390.chunk.js","sourcesContent":["import * as qs from 'query-string';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconsole.log(process.env.NODE_ENV);\nconst apiServer = process.env.NODE_ENV.trim() === \"production\" ? \"https://coherence-chat.herokuapp.com\" : 'http://localhost:5000';\n\nconst post = async (route, payload) => {\n  const token = cookies.get('token');\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    \"Access-Control-Allow_Methods\": \"POST\",\n    \"Access-Control_Allow_Headers\": \"*\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  };\n  if (token) {\n    headers.Authorization = 'Basic ' + btoa(token + \":unused\");\n  }\n  const fetchResult = await fetch(`${apiServer}/${route}`, {\n    method: 'post',\n    headers,\n    body: JSON.stringify(payload),\n  });\n\n  if (fetchResult.ok) {\n    const text = await fetchResult.text();\n    return JSON.parse(text);\n  }\n  console.log(\n    `POST call to /${route} errored with status ${fetchResult.status}`,\n  );\n  return null;\n};\n\nconst get = async (route, params) => {\n  let url = `${apiServer}/${route}`;\n  url += `?${qs.stringify(params)}`;\n\n  const token = cookies.get('token');\n  const headers = {\n    Accept: 'application/json',\n    \"Access-Control-Allow-Methods\": \"GET\",\n    \"Access-Control-Allow-Headers\": \"*\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  };\n  if (token) {\n    headers.Authorization = 'Basic ' + btoa(token + \":unused\");\n  }\n  const fetchResult = await fetch(url, {\n    method: 'get',\n    headers,\n  });\n  if (fetchResult.ok) {\n    const text = await fetchResult.text();\n    return JSON.parse(text);\n  }\n  console.log(\n    `GET call to /${route} errored with status ${fetchResult.status}`,\n  );\n  return null;\n};\n\nexport const login = async (phoneNumber, secretCode, password) => {\n    const response = await post(\"login/new\", { phoneNumber, secretCode, password });\n    return response;\n}\n\nexport const pullPatientData = async (calendarMonth) => {\n  const response = await get(\"patientData/new\", { calendarMonth });\n  return response;\n}\n\nexport const pullPatientDataForNumber = async (phoneNumber, calendarMonth) => {\n  const response = await get(\"patientData/new\", { phoneNumber, calendarMonth });\n  return response;\n}\n\nexport const updateDoseWindow = async (updatedDoseWindow) => {\n  const response = await post(\"doseWindow/update/new\", { updatedDoseWindow });\n  return response;\n}\n\nexport const deleteDoseWindow = async (dwId) => {\n  const response = await post(\"doseWindow/deactivate/new\", { doseWindowId: dwId });\n  return response;\n}\n\nexport const pauseUser = async () => {\n  const response = await post(\"user/pause/new\");\n  return response;\n}\n\nexport const resumeUser = async () => {\n  const response = await post(\"user/resume/new\");\n  return response;\n}\n\nexport const setHealthMetricsTracking = async (metricList) => {\n  const response = await post(\"user/healthMetrics/set\", { metricList });\n  return response;\n}\n","import ReactGA from 'react-ga';\n\nReactGA.initialize('G-NHQLEL1ETH');\n\nexport const trackPatientPortalLoad = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Loaded homepage\",\n        value: userId\n    });\n}\n\nexport const trackViewedDayDetails = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Viewed day details\",\n        value: userId\n    });\n}\n\nexport const trackStartAddingDoseWindow = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Start adding dose window\",\n        value: userId\n    });\n}\n\nexport const trackStartEditingDoseWindow = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Start editing dose window\",\n        value: userId\n    });\n}\n\nexport const trackSubmitEditedDoseWindow = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Submit edited dose window\",\n        value: userId\n    });\n}\n\nexport const trackStartDeletingDoseWindow = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Start deleting dose window\",\n        value: userId\n    });\n}\n\nexport const trackSubmitDeletingDoseWindow = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Submit deleting dose window\",\n        value: userId\n    });\n}\n\nexport const trackStartEditingHealthMetrics = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Start editing health metrics\",\n        value: userId\n    });\n}\n\nexport const trackSubmitEditingHealthMetrics = (userId) => {\n    ReactGA.event({\n        category: \"Engagement\",\n        action: \"Submit editing health metrics\",\n        value: userId\n    });\n}\n\nexport const trackPausedService = (userId) => {\n    ReactGA.event({\n        category: \"Churn\",\n        action: \"Paused service\",\n        value: userId\n    });\n}\n\nexport const trackResumedService = (userId) => {\n    ReactGA.event({\n        category: \"Growth\",\n        action: \"Resumed service\",\n        value: userId\n    });\n}","import React from \"react\";\n\nimport { Box, Select } from \"grommet\";\n\nconst TimeInput = ({value, onChangeTime}) => {\n    const [hour, setHour] = React.useState(value.hour);\n    const [minute, setMinute] = React.useState(value.minute);\n    return (\n        <Box direction=\"row\">\n            <Select options={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]} value={hour > 12 ? hour - 12 : (hour === 0 ? 12 : hour)} plain\n                onChange={\n                    ({value}) => {\n                        let newHour = hour >= 12 ? value + 12 : value % 12;\n                        setHour(newHour);\n                        onChangeTime({hour: newHour, minute});\n                    }\n                }\n            />\n            <Select options={[\"00\", \"15\", \"30\", \"45\"]} value={`${minute === 0 ? '0' : ''}${minute.toString()}`} plain onChange={({value}) => {\n                setMinute(parseInt(value));\n                onChangeTime({hour, minute: parseInt(value)});\n            }}/>\n            <Select options={[\"AM\", \"PM\"]} value={hour >= 12 ? \"PM\" : \"AM\"} plain onChange={({value}) => {\n                let newHour = hour;\n                if (value === \"AM\") {\n                    if (hour >= 12) {\n                        newHour = hour - 12;\n                        setHour(hour - 12);\n                    }\n                } else {\n                    if (hour < 12) {\n                        newHour = hour + 12;\n                        setHour(hour + 12);\n                    }\n                }\n                onChangeTime({hour: newHour, minute});\n            }}/>\n        </Box>\n    )\n}\n\nexport default TimeInput;","import React from \"react\";\nimport { Button, Spinner } from \"grommet\";\nimport { get } from \"lodash\";\n\nconst AnimatingButton = ({animating, ...props}) => {\n    if (animating) {\n        return <Button {...props} alignSelf=\"center\" label={null} disabled={true}><Spinner color={get(props, \"background.dark\", false) ? \"#FFF\" : \"brand\"}/></Button>;\n    } else {\n        return <Button {...props}>{props.children}</Button>;\n    }\n}\n\nexport default AnimatingButton;","import React from \"react\";\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport {\n    deleteDoseWindow,\n    pauseUser,\n    pullPatientData,\n    pullPatientDataForNumber,\n    resumeUser,\n    setHealthMetricsTracking,\n    updateDoseWindow,\n} from '../api';\nimport {\n    trackStartAddingDoseWindow,\n    trackPatientPortalLoad,\n    trackViewedDayDetails,\n    trackStartDeletingDoseWindow,\n    trackStartEditingDoseWindow,\n    trackStartEditingHealthMetrics,\n    trackSubmitDeletingDoseWindow,\n    trackSubmitEditedDoseWindow,\n    trackSubmitEditingHealthMetrics,\n    trackResumedService,\n    trackPausedService\n} from '../analytics';\nimport { Scatter } from 'react-chartjs-2';\nimport { Box, Button, CheckBoxGroup, Calendar, DropButton, Grid, Heading, Layer, Paragraph, Select } from \"grommet\";\nimport { Add, Checkmark, CircleInformation, Clear, Close, FormNextLink} from \"grommet-icons\";\nimport { DateTime } from 'luxon';\nimport 'chartjs-adapter-luxon';\nimport TimeInput from \"../components/TimeInput\";\nimport AnimatingButton from \"../components/AnimatingButton\";\n\nconst Home = () => {\n    const [cookies, setCookie, removeCookie] = useCookies(['token']);\n    const [patientData, setPatientData] = React.useState(null);\n    const [calendarMonth, setCalendarMonth] = React.useState(5);\n    const [impersonateOptions, setImpersonateOptions] = React.useState(null);\n    const [impersonating, setImpersonating] = React.useState(null);\n    const [selectedDay, setSelectedDay] = React.useState(null);\n    const [editingDoseWindow, setEditingDoseWindow] = React.useState(null);\n    const [deletingDoseWindow, setDeletingDoseWindow] = React.useState(null);\n    const [editingHealthTracking, setEditingHealthTracking] = React.useState(null);\n    const [animating, setAnimating] = React.useState(false);  // this is setting animating for ALL buttons for now\n\n    const dateRange = [DateTime.local(2021, 4, 1), DateTime.local(2021, 5, 31)]\n\n    const loadData = React.useCallback(async () => {\n        let loadedData = null;\n        if (impersonating) {\n            loadedData = await pullPatientDataForNumber(impersonating.value, calendarMonth);\n        } else {\n            loadedData = await pullPatientData(calendarMonth);\n        };\n        if (loadedData === null) {\n            removeCookie(\"token\");\n            return;\n        }\n        console.log(loadedData);\n        setPatientData(loadedData);\n        if (!impersonating) { // only track non impersonating data\n            trackPatientPortalLoad(loadedData.id);\n        }\n        setCookie('token', loadedData.token, {secure: true});  // refresh login token\n        if (loadedData.impersonateList) {\n            setImpersonateOptions(\n                loadedData.impersonateList.map((tuple_data) => { return { label: tuple_data[0], value: tuple_data[1]}})\n            );\n        }\n        setAnimating(false);\n    }, [calendarMonth, impersonating, removeCookie, setCookie])\n\n    const shouldRerender = React.useMemo(() => {\n        if (!cookies.token) {\n            return false;\n        }\n        if (patientData === null) {\n            return true;\n        }\n        if (patientData.month !== calendarMonth) {\n            return true;\n        }\n        if (!!impersonating !== !! patientData.impersonating) {\n            return true;\n        }\n        if (impersonating && patientData.impersonating && patientData.phoneNumber !== impersonating.value) {\n            return true;\n        }\n        return false;\n    }, [calendarMonth, cookies.token, impersonating, patientData]);\n\n    React.useEffect(() => {\n        console.log(\"rerendering\")\n        if (shouldRerender) {\n            loadData();\n        }\n    }, [loadData, shouldRerender]);\n\n    const logout = () => {\n        removeCookie(\"token\");\n    }\n\n    const renderDay = React.useCallback(({date}) => {\n        let dayColor = null;\n        const dt = DateTime.fromJSDate(date);\n        const day = dt.day;\n        if (patientData !== null) {\n            if (patientData.eventData.length >= day) {\n                const dayOfMonthData = patientData.eventData[day - 1];\n                if (dt.month === calendarMonth) {\n                    if (dayOfMonthData.day_status === \"taken\") {\n                        dayColor = \"status-ok\";\n                    } else if (dayOfMonthData.day_status === \"missed\") {\n                        dayColor = \"status-error\";\n                    } else if (dayOfMonthData.day_status === \"skip\") {\n                        dayColor = \"status-warning\";\n                    }\n                }\n            }\n        }\n        return (\n            <Box align=\"center\" justify=\"center\" margin={{vertical: \"xsmall\"}}>\n                <Box width=\"30px\" height=\"30px\" round=\"medium\" background={{color: dayColor}} align=\"center\" justify=\"center\">\n                    <Paragraph>{day}</Paragraph>\n                </Box>\n            </Box>\n        );\n    }, [calendarMonth, patientData]);\n\n    const units = {\n        weight: \"pounds\",\n        glucose: \"mg/dL\",\n        \"blood pressure\": \"mm/hg\"\n    }\n\n    const formattedHealthMetricData = React.useMemo(() => {\n        const data = {}\n        if (patientData !== null) {\n            for (const metric in patientData.healthMetricData) {\n                const metric_list = patientData.healthMetricData[metric];\n                console.log(metric_list);\n                if (metric !== \"blood pressure\") {\n                    data[metric] = {\n                        datasets: [{\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value};\n                            }),\n                            label: metric,\n                            fill: false,\n                            backgroundColor: 'rgb(255, 99, 132)',\n                            borderColor: 'rgba(255, 99, 132, 0.2)'\n                        }], options:{\n                            scales: {\n                                x: {type: \"time\", time: {unit: \"day\"}, grid: {\"color\": [\"#777\"]}, ticks:{color: \"#FFF\"}},\n                                y: {grid: {\"color\": [\"#AAA\"]}, ticks:{color: \"#FFF\"}, title: {text:units[metric], display: true, color: \"#FFF\"}}\n                            },\n\n                            color: \"white\",\n                            plugins: {\n                                legend: {display: false}\n                            },\n                            showLine: true\n                        }\n                    };\n                } else { // blood pressure has two timeseries\n                    data[metric] = {\n                        datasets: [\n                        {\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value.systolic};\n                            }),\n                            label: \"systolic\",\n                            fill: false,\n                            backgroundColor: 'rgb(255, 99, 132)',\n                            borderColor: 'rgba(255, 99, 132, 0.2)'\n                        },\n                        {\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value.diastolic};\n                            }),\n                            label: \"diastolic\",\n                            fill: false,\n                            backgroundColor: 'rgb(99, 255, 132)',\n                            borderColor: 'rgba(99, 255, 132, 0.2)'\n                        }\n                    ], options:{\n                        scales: {\n                            x: {type: \"time\", time: {unit: \"day\"}, grid: {\"color\": [\"#777\"]}, ticks:{color: \"#FFF\"}},\n                            y: {grid: {\"color\": [\"#AAA\"]}, ticks:{color: \"#FFF\"}, title: {text:units[metric], display: true, color: \"#FFF\"}}\n                        },\n\n                        color: \"white\",\n                        plugins: {\n                            datalabels: {color: 'black'}\n                        },\n                        showLine: true\n                    }\n                    };\n                }\n            }\n        }\n        console.log(\"returned HM data:\")\n        console.log(data);\n\n        return data;\n    }, [patientData]);\n\n    // scatter chart options\n\n    // const options =\n\n    const renderImpersonateListItem = React.useCallback((listItem) => {\n        console.log(listItem);\n        return listItem.label;\n    }, [])\n\n    const nextDayConversion = (dt) => {\n        if (dt.hour < 4) {\n            return dt.plus({days: 1});\n        }\n        return dt;\n    }\n\n    const validDoseWindows = React.useMemo(() => {\n        console.log(\"recomputing\")\n        if (editingDoseWindow === null) {\n            return true; // if you're not editing anything you're valid\n        };\n        if (patientData === null) {\n            return true;  // if we have no patient data your dose windows are fine\n        };\n        const editingStartTime = nextDayConversion(DateTime.utc(2021, 5, 1, editingDoseWindow.start_hour, editingDoseWindow.start_minute).setZone(\"local\").set({month: 5, day: 1}));\n        const editingEndTime = nextDayConversion(DateTime.utc(2021, 5, 1, editingDoseWindow.end_hour, editingDoseWindow.end_minute).setZone(\"local\").set({month: 5, day: 1}));\n        if (editingEndTime < editingStartTime.plus({minutes: 30})) {\n            return false; // dose window is too short\n        }\n        for (const dw of patientData.doseWindows) {\n            if (dw.id === editingDoseWindow.id) {\n                continue;  // we don't compare to the one we're editing\n            }\n            const existingStartTime = nextDayConversion(DateTime.utc(2021, 5, 1, dw.start_hour, dw.start_minute).setZone(\"local\").set({month: 5, day: 1}));\n            const existingEndTime = nextDayConversion(DateTime.utc(2021, 5, 1, dw.end_hour, dw.end_minute).setZone(\"local\").set({month: 5, day: 1}));\n            if (editingStartTime <= existingStartTime && existingStartTime <= editingEndTime) {\n                return false;\n            }\n            if (editingStartTime <= existingEndTime && existingEndTime <= editingEndTime) {\n                return false;\n            }\n        }\n        return true;\n    }, [editingDoseWindow, patientData]);\n\n    const currentTimeOfDay = React.useMemo(() => {\n        const currentTime = DateTime.local();\n        if (currentTime.hour > 4 && currentTime.hour < 12) {\n            return \"morning\";\n        } else if (currentTime.hour > 12 && currentTime.hour < 18) {\n            return \"afternoon\";\n        } else {\n            return \"evening\"\n        }\n    }, []);\n\n    const dateToDisplay = React.useMemo(() => {\n        const currentDay = DateTime.local();\n        if (calendarMonth === currentDay.month) {\n            return currentDay;\n        } else {\n            return currentDay.set({month: calendarMonth, day: 1});\n        }\n    }, [calendarMonth])\n\n    const randomChoice = (arr) => {\n        return arr[Math.floor(arr.length * Math.random())];\n    }\n    const randomHeaderEmoji = React.useMemo(() =>  {\n        return randomChoice([\"💫\", \"🌈\", \"🌱\", \"🏆\", \"📈\", \"💎\", \"💡\", \"🔆\", \"🔔\"]);\n    }, [])\n\n    const renderDoseWindowEditFields = React.useCallback(() => {\n        if (patientData === null) {\n            return null;\n        }\n        const startTime = DateTime.utc(2021, 5, 1, editingDoseWindow.start_hour, editingDoseWindow.start_minute);\n        const endTime = DateTime.utc(2021, 5, 1, editingDoseWindow.end_hour, editingDoseWindow.end_minute);\n        return (\n            <>\n                <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Start time (earliest time you'll be reminded)</Paragraph>\n                <TimeInput value={startTime.setZone('local')} color=\"dark-3\" onChangeTime={\n                    (newTime) => {\n                        const newDwTime = DateTime.local(2021, 5, 1, newTime.hour, newTime.minute).setZone(\"UTC\");\n                        setEditingDoseWindow({...editingDoseWindow, start_hour: newDwTime.hour, start_minute: newDwTime.minute});\n                    }}\n                />\n                <Paragraph size=\"small\" margin={{bottom: \"none\"}}>End time (latest time you'll be reminded)</Paragraph>\n                <TimeInput value={endTime.setZone('local')} color=\"dark-3\" onChangeTime={\n                    (newTime) => {\n                        console.log(`changed time to ${JSON.stringify(newTime)}`)\n                        const newDwTime = DateTime.local(2021, 5, 1, newTime.hour, newTime.minute).setZone(\"UTC\");\n                        setEditingDoseWindow({...editingDoseWindow, end_hour: newDwTime.hour, end_minute: newDwTime.minute});\n                    }}\n                />\n                {<AnimatingButton\n                    onClick={async () => {\n                        setAnimating(true);\n                        await updateDoseWindow(editingDoseWindow);\n                        await loadData();\n                        setEditingDoseWindow(null);\n                        if (impersonating === null) {\n                            trackSubmitEditedDoseWindow(patientData.id);\n                        }\n                    }}\n                    label={validDoseWindows ? \"Update\" : \"Invalid dose window\"}\n                    disabled={!validDoseWindows}\n                    animating={animating}\n                />}\n            </>\n        )\n    }, [animating, editingDoseWindow, impersonating, loadData, patientData, validDoseWindows]);\n\n    if (!cookies.token) {\n        return <Redirect to=\"/login\"/>;\n    }\n\n    const orderDays = (t1, t2) => {\n        if (t1 === t2) {\n            return 0;\n        }\n        if (t1 === \"morning\" || (t1 === \"afternoon\" && t2 === \"evening\")) {\n            return -1;\n        }\n        return 1;\n    }\n\n\n    return (\n        // <>\n        //     {cookies.token ? (<p>Logged in!</p>) : <Redirect to=\"/login\"/>}\n        //     <p>{JSON.stringify(patientData)}</p>\n        //     <button onClick={logout}>Logout</button>\n        //     {patientData.impersonateList ? <Select options={impersonateOptions} onChange={(selectedValue) => { loadDataForUser(selectedValue)}}/> : null}\n        //     {impersonating ? <p>Impersonating {impersonating}</p> : null}\n        // </>\n        <Box>\n            {impersonateOptions !== null ?\n                <Box direction=\"row\" align=\"center\" gap=\"small\" pad={{\"horizontal\": \"medium\"}}>\n                    <Paragraph>Impersonating:</Paragraph>\n                    <Select\n                        options={impersonateOptions}\n                        children={renderImpersonateListItem}\n                        onChange={({option}) => {\n                            console.log(\"setting\");\n                            setImpersonating(option);\n                        }}\n                    />\n                </Box> : null}\n            <Box align=\"center\">\n                <Heading size=\"small\">Good {currentTimeOfDay}{patientData ? `, ${patientData.patientName}` : \"\"}.</Heading>\n            </Box>\n            <Box>\n                {patientData && patientData.takeNow ?\n                    <Box\n                        align=\"center\"\n                        background={{\"color\":\"status-warning\", \"dark\": true}}\n                        round=\"medium\"\n                        margin={{horizontal: \"large\"}}\n                        pad={{vertical: \"medium\"}}\n                        animation={{\"type\":\"pulse\",\"size\":\"medium\",\"duration\":2000}}\n                    >\n                        <Paragraph alignSelf=\"center\" margin={{vertical: \"none\"}}>Dose to take now!</Paragraph>\n                    </Box>\n                    :\n                    <Box align=\"center\" background={{\"color\":\"brand\", \"dark\": true}} round=\"medium\" margin={{horizontal: \"large\"}}>\n                        <Paragraph>No doses to take right now. {randomHeaderEmoji}</Paragraph>\n                    </Box>\n                }\n            </Box>\n            <Box margin={{vertical: \"medium\"}} pad={{horizontal: \"large\"}}>\n                <DropButton\n                    icon={<CircleInformation/>}\n                    label=\"How do I use Coherence?\"\n                    dropContent={\n                        <Box pad={{horizontal: \"small\"}}>\n                            <Paragraph textAlign=\"center\">Texting commands</Paragraph>\n                            <Grid columns={[\"xsmall\", \"small\"]} align=\"center\" justifyContent=\"center\" gap={{column: \"small\"}}>\n                                <Paragraph size=\"small\">T, taken</Paragraph>\n                                <Paragraph size=\"small\">Mark your medication as taken at the current time</Paragraph>\n                                <Paragraph size=\"small\">T @ 5:00pm</Paragraph>\n                                <Paragraph size=\"small\">Mark your medication as taken at 5pm</Paragraph>\n                                <Paragraph size=\"small\">S, skip</Paragraph>\n                                <Paragraph size=\"small\">Skip the current dose</Paragraph>\n                                <Paragraph size=\"small\">1</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by ten minutes</Paragraph>\n                                <Paragraph size=\"small\">2</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by half an hour</Paragraph>\n                                <Paragraph size=\"small\">3</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by an hour</Paragraph>\n                                <Paragraph size=\"small\">20, 20 min</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by 20 minutes</Paragraph>\n                                <Paragraph size=\"small\">glucose:140, 140 mg/dL</Paragraph>\n                                <Paragraph size=\"small\">Record glucose reading</Paragraph>\n                                <Paragraph size=\"small\">weight:150, 150 pounds, 150 lb</Paragraph>\n                                <Paragraph size=\"small\">Record weight reading</Paragraph>\n                                <Paragraph size=\"small\">120/80, 120 80</Paragraph>\n                                <Paragraph size=\"small\">Record blood pressure reading</Paragraph>\n                                <Paragraph size=\"small\">W, website, site</Paragraph>\n                                <Paragraph size=\"small\">Get the website link sent to you</Paragraph>\n                                <Paragraph size=\"small\">Eating, going for a walk</Paragraph>\n                                <Paragraph size=\"small\">Tell Coherence you're busy with an activity</Paragraph>\n                                <Paragraph size=\"small\">X</Paragraph>\n                                <Paragraph size=\"small\">Report an error</Paragraph>\n                            </Grid>\n                        </Box>\n                    }\n                    dropAlign={{ top: 'bottom' }}\n                />\n            </Box>\n            <Box pad=\"medium\" background={{color: \"light-3\"}}>\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}} fill={true}>Medication history</Paragraph>\n                <Calendar\n                    date={dateToDisplay.toISO()}\n                    fill={true}\n                    onSelect={(date) => {\n                        const dt = DateTime.fromISO(date);\n                        setSelectedDay(dt.day);\n                        if (impersonating === null) {\n                            trackViewedDayDetails(patientData.id);\n                        }\n                    }}\n                    showAdjacentDays={false}\n                    bounds={dateRange.map((date) => {return date.toString()})}\n                    children={renderDay}\n                    daysOfWeek={true}\n                    onReference={(date) => {\n                        setCalendarMonth(DateTime.fromISO(date).month);\n                        setPatientData({...patientData, eventData: []}); // hide event data while we load\n                    }}\n                    animate={false}\n                />\n            </Box>\n            {selectedDay && (\n                <Layer\n                    onEsc={() => setSelectedDay(false)}\n                    onClickOutside={() => setSelectedDay(false)}\n                    responsive={false}\n                >\n                    <Box width=\"70vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">{DateTime.local().set({month: calendarMonth}).monthLong} {selectedDay}</Paragraph>\n                            <Button icon={<Close />} onClick={() => setSelectedDay(false)} />\n                        </Box>\n                        {\n                            patientData.eventData[selectedDay - 1].day_status ?\n                            Object.keys(patientData.eventData[selectedDay - 1].time_of_day).sort(orderDays).map((key) => {\n                                let numberSuffix = patientData.eventData[selectedDay - 1].time_of_day[key].length > 1;  // handle multiple dose windows in the same time of day\n                                return (\n                                    patientData.eventData[selectedDay - 1].time_of_day[key].map((event, index) => {\n                                        return (\n                                            <>\n                                                <Paragraph key={`tod-${key}`} margin={{bottom: \"none\"}}>{key} dose{numberSuffix ? ` ${index + 1}` : ''}</Paragraph>\n                                                <Box key={`todStatusContainer-${key}`} pad={{left: \"medium\"}} direction=\"row\" align=\"center\" justify=\"between\">\n                                                    <Paragraph key={`todStatus-${key}`} size=\"small\">\n                                                        {event.type}{event.time ? ` at ${DateTime.fromJSDate(new Date(event.time)).toLocaleString(DateTime.TIME_SIMPLE)}` : ''}\n                                                    </Paragraph>\n                                                    {event.type === \"taken\" ? <Checkmark color=\"status-ok\" size=\"small\"/> : null}\n                                                    {event.type === \"skipped\" ? <Clear color=\"status-warning\" size=\"small\"/> : null}\n                                                    {event.type === \"missed\" ? <Close color=\"status-error\" size=\"small\"/> : null}\n                                                </Box>\n                                            </>\n                                        )\n                                    })\n                                )\n                            }) :\n                            <Paragraph>No data for this day.</Paragraph>\n                        }\n                    </Box>\n                </Layer>\n            )}\n            <Box align=\"center\" background=\"brand\" pad={{bottom: \"large\"}}>\n                <Paragraph margin={{bottom: \"none\"}}>Health tracking</Paragraph>\n                {Object.keys(formattedHealthMetricData).length === 0 ? <Paragraph size=\"small\">You're not tracking any health metrics yet.</Paragraph> : null}\n                {formattedHealthMetricData && \"blood pressure\" in formattedHealthMetricData ? (\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Blood pressure</Paragraph>\n                        {formattedHealthMetricData[\"blood pressure\"][0].datasets.data.length > 0 ?\n                            <Scatter data={formattedHealthMetricData[\"blood pressure\"]} options={formattedHealthMetricData[\"blood pressure\"].options}/> :\n                            <Paragraph>No blood pressure data recorded yet. Example texts you can send: \"120/80\", \"120 80\".</Paragraph>\n                        }\n                    </Box>) : null}\n                {formattedHealthMetricData && \"weight\" in formattedHealthMetricData ?\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Weight</Paragraph>\n                        {formattedHealthMetricData.weight.datasets.data.length > 0 ?\n                        <Scatter data={formattedHealthMetricData.weight} options={formattedHealthMetricData.weight.options}/> :\n                        <Paragraph>No weight data recorded yet. Example texts you can send: \"weight:150\", \"150 lb\", \"150 pounds\".</Paragraph>}\n                    </Box>\n                    : null}\n                {formattedHealthMetricData && \"glucose\" in formattedHealthMetricData ?\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Glucose</Paragraph>\n                        {formattedHealthMetricData.glucose.datasets.data.length > 0 ?\n                        <Scatter data={formattedHealthMetricData.glucose} options={formattedHealthMetricData.glucose.options}/> :\n                        <Paragraph>No glucose data recorded yet. Example texts you can send: \"glucose:140\", \"140 mg/dL\"</Paragraph>}\n                    </Box>\n                    : null}\n                <Button label={Object.keys(formattedHealthMetricData).length === 0 ? \"Start tracking\": \"Edit tracking\"} onClick={() => {\n                    setEditingHealthTracking(Object.keys(formattedHealthMetricData));\n                    if (impersonating === null) {\n                        trackStartEditingHealthMetrics(patientData.id);\n                    }\n                }} margin={{top: \"medium\"}}/>\n            </Box>\n            {editingHealthTracking !== null ?\n                <Layer\n                    onEsc={() => setEditingHealthTracking(null)}\n                    onClickOutside={() => setEditingHealthTracking(null)}\n                    responsive={false}\n                >\n                    <Box width=\"70vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Choose what you want to track</Paragraph>\n                            <Button icon={<Close />} onClick={() => setEditingHealthTracking(null)} />\n                        </Box>\n                        <CheckBoxGroup\n                            options={[\"blood pressure\", \"weight\", \"glucose\"]}\n                            value={editingHealthTracking}\n                            onChange={(e) => {setEditingHealthTracking(e.value)}}\n                        />\n                        <AnimatingButton animating={animating} label=\"Save changes\" margin={{top:\"medium\"}} onClick={async () => {\n                            setAnimating(true);\n                            console.log(editingHealthTracking);\n                            await setHealthMetricsTracking(editingHealthTracking);\n                            await loadData();\n                            setEditingHealthTracking(null);\n                            if (impersonating === null) {\n                                trackSubmitEditingHealthMetrics(patientData.id);\n                            }\n                        }}/>\n                    </Box>\n                </Layer> : null\n            }\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"bottom\">\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Dose windows</Paragraph>\n                    {\n                        patientData ? patientData.doseWindows.map((dw) => {\n                            const startTime = DateTime.utc(2021, 5, 1, dw.start_hour, dw.start_minute);\n                            const endTime = DateTime.utc(2021, 5, 1, dw.end_hour, dw.end_minute);\n                            return (\n                                <Grid key={`doseWindowContainer-${dw.id}`} columns={[\"small\", \"xsmall\", \"flex\"]} align=\"center\" pad={{horizontal: \"large\"}} alignContent=\"center\" justifyContent=\"center\" justify=\"center\">\n                                    <Box direction=\"row\" align=\"center\">\n                                        <Paragraph>{startTime.setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                        <FormNextLink/>\n                                        <Paragraph>{endTime.setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                    </Box>\n                                    <Button label=\"edit\" onClick={() => {\n                                        setEditingDoseWindow(dw);\n                                        if (impersonating === null) {\n                                            trackStartEditingDoseWindow(patientData.id);\n                                        }\n                                    }} size=\"small\" margin={{horizontal: \"none\"}}/>\n                                    <Button onClick={() => {\n                                        setDeletingDoseWindow(dw);\n                                        if (impersonating === null) {\n                                            trackStartDeletingDoseWindow(patientData.id);\n                                        }\n                                    }} label=\"delete\" size=\"small\" padding={{horizontal: \"none\"}}/>\n                                </Grid>\n                            )\n                        }) : null\n                    }\n                    <Button label=\"Add dose window\" onClick={() => {\n                        setEditingDoseWindow({start_hour: 0, start_minute:0, end_hour: 0, end_minute: 0});\n                        if (impersonating === null) {\n                            trackStartAddingDoseWindow(patientData.id);\n                        }\n                    }} icon={<Add/>}/>\n            </Box>\n            {editingDoseWindow && (\n                <Layer\n                    onEsc={() => setEditingDoseWindow(null)}\n                    onClickOutside={() => setEditingDoseWindow(null)}\n                    responsive={false}\n                >\n                    <Box width=\"90vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Edit dose window</Paragraph>\n                            <Button icon={<Close />} onClick={() => setEditingDoseWindow(null)} />\n                        </Box>\n                        <Box>\n                            {renderDoseWindowEditFields(editingDoseWindow)}\n                        </Box>\n                    </Box>\n                </Layer>\n            )}\n            {deletingDoseWindow && (\n                <Layer\n                    onEsc={() => setDeletingDoseWindow(null)}\n                    onClickOutside={() => setDeletingDoseWindow(null)}\n                    responsive={false}\n                >\n                    <Box width=\"90vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Confirm delete dose window</Paragraph>\n                            <Button icon={<Close />} onClick={() => setDeletingDoseWindow(null)}/>\n                        </Box>\n                        <Box align=\"center\">\n                            <Paragraph margin={{bottom: \"none\"}}>You're about to delete the dose window</Paragraph>\n                            <Box direction=\"row\" align=\"center\" margin={{bottom: \"medium\"}}>\n                                <Paragraph>{DateTime.utc(2021, 5, 1, deletingDoseWindow.start_hour, deletingDoseWindow.start_minute).setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                <FormNextLink/>\n                                <Paragraph>{DateTime.utc(2021, 5, 1, deletingDoseWindow.end_hour, deletingDoseWindow.end_minute).setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                            </Box>\n                            <AnimatingButton onClick={async () => {\n                                setAnimating(true);\n                                await deleteDoseWindow(deletingDoseWindow.id)\n                                await loadData();\n                                setDeletingDoseWindow(null);\n                                if (impersonating === null) {\n                                    trackSubmitDeletingDoseWindow(patientData.id);\n                                }\n                            }} label=\"Confirm\" animating={animating}/>\n                        </Box>\n                    </Box>\n                </Layer>\n            )}\n            <Box align=\"center\" pad={{vertical: \"medium\"}}>\n                {patientData ?\n                <>\n                    <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Pause / resume Coherence</Paragraph>\n                    <Paragraph size=\"small\" color=\"dark-3\">Coherence is currently {patientData.pausedService ? \"paused\" : \"active\"}.</Paragraph>\n                    <AnimatingButton\n                        background={patientData.pausedService ? {\"dark\": true} : null}\n                        animating={animating}\n                        style={{padding: \"10px\"}}\n                        primary={patientData.pausedService}\n                        onClick={async () => {\n                            setAnimating(true);\n                            if (patientData.pausedService) {\n                                await resumeUser();\n                                if (impersonating === null) {\n                                    trackResumedService(patientData.id);\n                                }\n                            } else {\n                                await pauseUser();\n                                if (impersonating === null) {\n                                    trackPausedService(patientData.id);\n                                }\n                            }\n                            loadData();\n                        }} label={`${patientData.pausedService ? \"Resume\" : \"Pause\"} Coherence`} />\n                    {patientData.pausedService ? <Paragraph size=\"small\" color=\"status-warning\" textAlign=\"center\">While Coherence is paused, we can't respond to any texts you send us, or remind you about your medications.</Paragraph> : null}\n                </> : null}\n            </Box>\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"top\">\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Need help with anything?</Paragraph>\n                <Paragraph size=\"small\" color=\"dark-3\">Our customer service is just a text away at (650) 667-1146. Reach out any time and we'll get back to you in a few hours!</Paragraph>\n            </Box>\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"top\">\n                <Button onClick={logout} label=\"Log out\" />\n            </Box>\n        </Box>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { login } from \"../api\";\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport { Box, Paragraph, Heading, Button, TextInput } from \"grommet\";\nimport { Phone, Login, Fireball, Lock } from \"grommet-icons\";\n\nconst Intro = () => {\n    const [phoneNumber, setPhoneNumber] = React.useState(\"\");\n    const [secretCode, setSecretCode] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [passwordConfirm, setPasswordConfirm] = React.useState(\"\");\n    const [componentToDisplay, setComponentToDisplay] = React.useState(\"phoneNumber\");\n    const [cookies, setCookie] = useCookies([\"token\"]);\n    const [authError, setAuthError] = React.useState(false);\n    const submitAll = React.useCallback(async () => {\n        const response = await login(phoneNumber, secretCode, password);\n        if (response === null) {\n            setAuthError(true);\n        } else {\n            if (response.status === \"success\") {\n                console.log(\"setting cookie\");\n                setCookie(\"token\", response.token, {secure: true});\n            }\n            setComponentToDisplay(response.status);\n            setAuthError(false);\n        }\n    }, [password, phoneNumber, secretCode, setCookie])\n    const getInputField = React.useCallback(() => {\n        if (componentToDisplay === \"phoneNumber\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Enter phone number.</Paragraph>\n                <TextInput\n                    icon={<Phone/>}\n                    placeholder=\"(555) 555-5555\"\n                    size=\"small\"\n                    value={phoneNumber}\n                    onChange={(event) => {setPhoneNumber(event.target.value)}}\n                />\n                {authError ? <Paragraph size=\"small\">Invalid phone number.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"2fa\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">We've texted you a secret code, enter it below.</Paragraph>\n                <TextInput\n                    icon={<Fireball />}\n                    placeholder=\"123456\"\n                    size=\"small\"\n                    value={secretCode}\n                    onChange={(event) => {setSecretCode(event.target.value)}}\n                />\n                {authError ? <Paragraph size=\"small\">Invalid secret code.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"password\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Enter password.</Paragraph>\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"•••••••••\"\n                    size=\"small\"\n                    value={password}\n                    onChange={(event) => {\n                        setPassword(event.target.value);\n                        setPasswordConfirm(event.target.value);\n                    }}\n                    type=\"password\"\n                />\n                {authError ? <Paragraph size=\"small\">Invalid password. If you'd like us to reset it, give us a text at (650) 667-1146.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"register\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Create your password.</Paragraph>\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"Enter password\"\n                    size=\"small\"\n                    value={password}\n                    onChange={(event) => {setPassword(event.target.value)}}\n                    type=\"password\"\n                />\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"Type it again\"\n                    size=\"small\"\n                    value={passwordConfirm}\n                    onChange={(event) => {setPasswordConfirm(event.target.value)}}\n                    type=\"password\"\n                />\n                {password !== passwordConfirm ? <Paragraph size=\"small\">Passwords don't match.</Paragraph> : null}\n            </>\n        }\n    }, [authError, componentToDisplay, password, passwordConfirm, phoneNumber, secretCode])\n    if (cookies.token) {\n        return <Redirect to=\"/\"/>;\n    }\n    return (\n        <Box height=\"100vh\" flex=\"grow\" background={{\"position\":\"center\",\"dark\":false,\"opacity\":\"strong\"}}>\n            <Box height=\"40vh\" align=\"center\" justify=\"center\" pad=\"large\">\n                <Paragraph>welcome to</Paragraph>\n                <Heading>coherence</Heading>\n            </Box>\n            <Box height=\"60vh\" align=\"center\" justify=\"between\" background={{color: \"brand\", dark: true}} pad=\"large\">\n                <Paragraph color=\"white\" textAlign=\"center\">Peace of mind with your medications is just around the corner.</Paragraph>\n                <Box>\n                    <Box width=\"200px\" margin={{bottom: \"medium\", top: \"xsmall\"}}>\n                        {getInputField()}\n                    </Box>\n                    <Button label=\"submit\" icon={<Login/>} onClick={submitAll} disabled={password !== passwordConfirm}/>\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n\nexport default Intro;","import './App.css';\nimport Home from './pages/Home';\nimport Intro from './pages/Intro';\n\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path={'/'} render={() => <Home />}/>\n            <Route exact path={'/login'} render={() => <Intro />}/>\n        </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CookiesProvider } from 'react-cookie';\nimport { Grommet } from \"grommet\";\n\nconst grommetTheme = {\n  global: {\n    colors: {\n      brand: \"#002864\",\n      text: {light: \"#002864\"},\n      paragraph: {light: \"#002864\"},\n      background: \"#FFF\"\n    }\n  },\n  spinner: {\n    container: {\n      color: {\n        light: \"#002864\",\n        dark: \"FFF\"\n      }\n    }\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <Grommet theme={grommetTheme} themeMode=\"light\">\n        <App />\n      </Grommet>\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}