{"version":3,"sources":["api.js","analytics.js","components/TimeInput.js","components/AnimatingButton.js","pages/Home.js","pages/Intro.js","App.js","reportWebVitals.js","index.js"],"names":["cookies","Cookies","console","log","process","apiServer","trim","post","route","payload","a","token","get","headers","Accept","Authorization","btoa","fetch","method","body","JSON","stringify","fetchResult","ok","text","parse","status","params","url","qs","login","phoneNumber","secretCode","password","response","pullPatientData","calendarMonth","pullPatientDataForNumber","updateDoseWindow","updatedDoseWindow","deleteDoseWindow","dwId","doseWindowId","pauseUser","resumeUser","setHealthMetricsTracking","metricList","ReactGA","initialize","cookieFlags","shouldLogAnalytics","trackPausedService","userId","event","category","action","value","TimeInput","onChangeTime","React","useState","hour","setHour","minute","setMinute","Box","direction","Select","options","plain","onChange","newHour","toString","parseInt","AnimatingButton","animating","props","Button","alignSelf","label","disabled","Spinner","color","children","Home","DateTime","local","zoneName","useCookies","setCookie","removeCookie","patientData","setPatientData","setCalendarMonth","impersonateOptions","setImpersonateOptions","impersonating","setImpersonating","selectedDay","setSelectedDay","editingDoseWindow","setEditingDoseWindow","deletingDoseWindow","setDeletingDoseWindow","editingHealthTracking","setEditingHealthTracking","setAnimating","dateRange","loadData","useCallback","loadedData","id","secure","impersonateList","map","tuple_data","shouldRerender","useMemo","month","useEffect","renderDay","date","dayColor","dt","fromJSDate","day","eventData","length","dayOfMonthData","day_status","align","justify","margin","vertical","width","height","round","background","Paragraph","formattedHealthMetricData","units","weight","glucose","data","metric","healthMetricData","metric_list","datasets","x","fromHTTP","time","y","fill","backgroundColor","borderColor","scales","type","unit","grid","ticks","title","display","plugins","legend","zoom","enabled","mode","showLine","systolic","diastolic","datalabels","renderImpersonateListItem","listItem","nextDayConversion","plus","days","validDoseWindows","editingStartTime","utc","start_hour","start_minute","setZone","set","editingEndTime","end_hour","end_minute","minutes","doseWindows","dw","existingStartTime","existingEndTime","currentTimeOfDay","currentTime","dateToDisplay","currentDay","randomHeaderEmoji","arr","Math","floor","random","renderDoseWindowEditFields","startTime","endTime","size","bottom","newTime","newDwTime","onClick","to","gap","pad","option","Heading","patientName","takeNow","horizontal","animation","DropButton","icon","CircleInformation","dropContent","textAlign","Grid","columns","justifyContent","column","dropAlign","top","Calendar","toISO","onSelect","fromISO","showAdjacentDays","bounds","daysOfWeek","onReference","animate","Layer","onEsc","onClickOutside","responsive","monthLong","Close","Object","keys","time_of_day","sort","t1","t2","key","numberSuffix","index","left","Date","toLocaleString","TIME_SIMPLE","Checkmark","Clear","CheckBoxGroup","e","border","alignContent","FormNextLink","padding","Add","pausedService","style","primary","Intro","setPhoneNumber","setSecretCode","setPassword","passwordConfirm","setPasswordConfirm","componentToDisplay","setComponentToDisplay","authError","setAuthError","submitAll","getInputField","TextInput","Phone","placeholder","target","Fireball","Lock","flex","dark","Login","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CookiesProvider","Grommet","theme","global","colors","brand","light","paragraph","spinner","container","themeMode","document","getElementById"],"mappings":"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","file":"static/js/main.470cc9b9.chunk.js","sourcesContent":["import * as qs from 'query-string';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconsole.log(process.env.NODE_ENV);\nconst apiServer = process.env.NODE_ENV.trim() === \"production\" ? \"https://coherence-chat.herokuapp.com\" : 'http://localhost:5000';\n\nconst post = async (route, payload) => {\n  const token = cookies.get('token');\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    \"Access-Control-Allow_Methods\": \"POST\",\n    \"Access-Control_Allow_Headers\": \"*\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  };\n  if (token) {\n    headers.Authorization = 'Basic ' + btoa(token + \":unused\");\n  }\n  const fetchResult = await fetch(`${apiServer}/${route}`, {\n    method: 'post',\n    headers,\n    body: JSON.stringify(payload),\n  });\n\n  if (fetchResult.ok) {\n    const text = await fetchResult.text();\n    return JSON.parse(text);\n  }\n  console.log(\n    `POST call to /${route} errored with status ${fetchResult.status}`,\n  );\n  return null;\n};\n\nconst get = async (route, params) => {\n  let url = `${apiServer}/${route}`;\n  url += `?${qs.stringify(params)}`;\n\n  const token = cookies.get('token');\n  const headers = {\n    Accept: 'application/json',\n    \"Access-Control-Allow-Methods\": \"GET\",\n    \"Access-Control-Allow-Headers\": \"*\",\n    \"Access-Control-Allow-Origin\": \"*\",\n  };\n  if (token) {\n    headers.Authorization = 'Basic ' + btoa(token + \":unused\");\n  }\n  const fetchResult = await fetch(url, {\n    method: 'get',\n    headers,\n  });\n  if (fetchResult.ok) {\n    const text = await fetchResult.text();\n    return JSON.parse(text);\n  }\n  console.log(\n    `GET call to /${route} errored with status ${fetchResult.status}`,\n  );\n  return null;\n};\n\nexport const login = async (phoneNumber, secretCode, password) => {\n    const response = await post(\"login/new\", { phoneNumber, secretCode, password });\n    return response;\n}\n\nexport const pullPatientData = async (calendarMonth) => {\n  const response = await get(\"patientData/new\", { calendarMonth });\n  return response;\n}\n\nexport const pullPatientDataForNumber = async (phoneNumber, calendarMonth) => {\n  const response = await get(\"patientData/new\", { phoneNumber, calendarMonth });\n  return response;\n}\n\nexport const updateDoseWindow = async (updatedDoseWindow) => {\n  const response = await post(\"doseWindow/update/new\", { updatedDoseWindow });\n  return response;\n}\n\nexport const deleteDoseWindow = async (dwId) => {\n  const response = await post(\"doseWindow/deactivate/new\", { doseWindowId: dwId });\n  return response;\n}\n\nexport const pauseUser = async () => {\n  const response = await post(\"user/pause/new\");\n  return response;\n}\n\nexport const resumeUser = async () => {\n  const response = await post(\"user/resume/new\");\n  return response;\n}\n\nexport const setHealthMetricsTracking = async (metricList) => {\n  const response = await post(\"user/healthMetrics/set\", { metricList });\n  return response;\n}\n","import ReactGA from 'react-ga';\n\nReactGA.initialize('UA-196778289-2', {cookieFlags: 'max-age=7200;SameSite=None;Secure'});\n\nconst shouldLogAnalytics = process.env.NODE_ENV.trim() === \"production\";\n// console.log(\"initialized\")\n\nexport const trackPatientPortalLoad = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Loaded homepage\",\n            value: userId\n        });\n    }\n}\n\nexport const trackViewedDayDetails = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Viewed day details\",\n            value: userId\n        });\n    }\n}\n\nexport const trackStartAddingDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Start adding dose window\",\n            value: userId\n        });\n    }\n}\n\nexport const trackStartEditingDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Start editing dose window\",\n            value: userId\n        });\n    }\n}\n\nexport const trackSubmitEditedDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Submit edited dose window\",\n            value: userId\n        });\n    }\n}\n\nexport const trackStartDeletingDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Start deleting dose window\",\n            value: userId\n        });\n    }\n}\n\nexport const trackSubmitDeletingDoseWindow = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Submit deleting dose window\",\n            value: userId\n        });\n    }\n}\n\nexport const trackStartEditingHealthMetrics = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Start editing health metrics\",\n            value: userId\n        });\n    }\n}\n\nexport const trackSubmitEditingHealthMetrics = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Engagement\",\n            action: \"Submit editing health metrics\",\n            value: userId\n        });\n    }\n}\n\nexport const trackPausedService = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Churn\",\n            action: \"Paused service\",\n            value: userId\n        });\n    }\n}\n\nexport const trackResumedService = (userId) => {\n    if (shouldLogAnalytics) {\n        ReactGA.event({\n            category: \"Growth\",\n            action: \"Resumed service\",\n            value: userId\n        });\n    }\n}","import React from \"react\";\n\nimport { Box, Select } from \"grommet\";\n\nconst TimeInput = ({value, onChangeTime}) => {\n    const [hour, setHour] = React.useState(value.hour);\n    const [minute, setMinute] = React.useState(value.minute);\n    return (\n        <Box direction=\"row\">\n            <Select options={[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]} value={hour > 12 ? hour - 12 : (hour === 0 ? 12 : hour)} plain\n                onChange={\n                    ({value}) => {\n                        let newHour = hour >= 12 ? value + 12 : value % 12;\n                        setHour(newHour);\n                        onChangeTime({hour: newHour, minute});\n                    }\n                }\n            />\n            <Select options={[\"00\", \"15\", \"30\", \"45\"]} value={`${minute === 0 ? '0' : ''}${minute.toString()}`} plain onChange={({value}) => {\n                setMinute(parseInt(value));\n                onChangeTime({hour, minute: parseInt(value)});\n            }}/>\n            <Select options={[\"AM\", \"PM\"]} value={hour >= 12 ? \"PM\" : \"AM\"} plain onChange={({value}) => {\n                let newHour = hour;\n                if (value === \"AM\") {\n                    if (hour >= 12) {\n                        newHour = hour - 12;\n                        setHour(hour - 12);\n                    }\n                } else {\n                    if (hour < 12) {\n                        newHour = hour + 12;\n                        setHour(hour + 12);\n                    }\n                }\n                onChangeTime({hour: newHour, minute});\n            }}/>\n        </Box>\n    )\n}\n\nexport default TimeInput;","import React from \"react\";\nimport { Button, Spinner } from \"grommet\";\nimport { get } from \"lodash\";\n\nconst AnimatingButton = ({animating, ...props}) => {\n    if (animating) {\n        return <Button {...props} alignSelf=\"center\" label={null} disabled={true}><Spinner color={get(props, \"background.dark\", false) ? \"#FFF\" : \"brand\"}/></Button>;\n    } else {\n        return <Button {...props}>{props.children}</Button>;\n    }\n}\n\nexport default AnimatingButton;","import React from \"react\";\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport {\n    deleteDoseWindow,\n    pauseUser,\n    pullPatientData,\n    pullPatientDataForNumber,\n    resumeUser,\n    setHealthMetricsTracking,\n    updateDoseWindow,\n} from '../api';\nimport {\n    trackStartAddingDoseWindow,\n    trackPatientPortalLoad,\n    trackViewedDayDetails,\n    trackStartDeletingDoseWindow,\n    trackStartEditingDoseWindow,\n    trackStartEditingHealthMetrics,\n    trackSubmitDeletingDoseWindow,\n    trackSubmitEditedDoseWindow,\n    trackSubmitEditingHealthMetrics,\n    trackResumedService,\n    trackPausedService\n} from '../analytics';\nimport { Scatter } from 'react-chartjs-2';\nimport 'chartjs-plugin-zoom';\nimport { Box, Button, CheckBoxGroup, Calendar, DropButton, Grid, Heading, Layer, Paragraph, Select } from \"grommet\";\nimport { Add, Checkmark, CircleInformation, Clear, Close, FormNextLink} from \"grommet-icons\";\nimport { DateTime } from 'luxon';\nimport 'chartjs-adapter-luxon';\nimport TimeInput from \"../components/TimeInput\";\nimport AnimatingButton from \"../components/AnimatingButton\";\n\nimport 'chartjs-plugin-zoom'; // hmm\n\nconst Home = () => {\n\n    console.log(DateTime.local().zoneName)\n    const [cookies, setCookie, removeCookie] = useCookies(['token']);\n    const [patientData, setPatientData] = React.useState(null);\n    const [calendarMonth, setCalendarMonth] = React.useState(5);\n    const [impersonateOptions, setImpersonateOptions] = React.useState(null);\n    const [impersonating, setImpersonating] = React.useState(null);\n    const [selectedDay, setSelectedDay] = React.useState(null);\n    const [editingDoseWindow, setEditingDoseWindow] = React.useState(null);\n    const [deletingDoseWindow, setDeletingDoseWindow] = React.useState(null);\n    const [editingHealthTracking, setEditingHealthTracking] = React.useState(null);\n    const [animating, setAnimating] = React.useState(false);  // this is setting animating for ALL buttons for now\n\n    const dateRange = [DateTime.local(2021, 4, 1), DateTime.local(2021, 5, 31)]\n\n    const loadData = React.useCallback(async () => {\n        let loadedData = null;\n        if (impersonating) {\n            loadedData = await pullPatientDataForNumber(impersonating.value, calendarMonth);\n        } else {\n            loadedData = await pullPatientData(calendarMonth);\n        };\n        if (loadedData === null) {\n            removeCookie(\"token\");\n            return;\n        }\n        console.log(loadedData);\n        setPatientData(loadedData);\n        if (!impersonating) { // only track non impersonating data\n            trackPatientPortalLoad(loadedData.id);\n        }\n        setCookie('token', loadedData.token, {secure: true});  // refresh login token\n        if (loadedData.impersonateList) {\n            setImpersonateOptions(\n                loadedData.impersonateList.map((tuple_data) => { return { label: tuple_data[0], value: tuple_data[1]}})\n            );\n        }\n        setAnimating(false);\n    }, [calendarMonth, impersonating, removeCookie, setCookie])\n\n    const shouldRerender = React.useMemo(() => {\n        if (!cookies.token) {\n            return false;\n        }\n        if (patientData === null) {\n            return true;\n        }\n        if (patientData.month !== calendarMonth) {\n            return true;\n        }\n        if (!!impersonating !== !! patientData.impersonating) {\n            return true;\n        }\n        if (impersonating && patientData.impersonating && patientData.phoneNumber !== impersonating.value) {\n            return true;\n        }\n        return false;\n    }, [calendarMonth, cookies.token, impersonating, patientData]);\n\n    React.useEffect(() => {\n        console.log(\"rerendering\")\n        if (shouldRerender) {\n            loadData();\n        }\n    }, [loadData, shouldRerender]);\n\n    const logout = () => {\n        removeCookie(\"token\");\n    }\n\n    const renderDay = React.useCallback(({date}) => {\n        let dayColor = null;\n        const dt = DateTime.fromJSDate(date);\n        const day = dt.day;\n        if (patientData !== null) {\n            if (patientData.eventData.length >= day) {\n                const dayOfMonthData = patientData.eventData[day - 1];\n                if (dt.month === calendarMonth) {\n                    if (dayOfMonthData.day_status === \"taken\") {\n                        dayColor = \"status-ok\";\n                    } else if (dayOfMonthData.day_status === \"missed\") {\n                        dayColor = \"status-error\";\n                    } else if (dayOfMonthData.day_status === \"skip\") {\n                        dayColor = \"status-warning\";\n                    }\n                }\n            }\n        }\n        return (\n            <Box align=\"center\" justify=\"center\" margin={{vertical: \"xsmall\"}}>\n                <Box width=\"30px\" height=\"30px\" round=\"medium\" background={{color: dayColor}} align=\"center\" justify=\"center\">\n                    <Paragraph>{day}</Paragraph>\n                </Box>\n            </Box>\n        );\n    }, [calendarMonth, patientData]);\n\n    const formattedHealthMetricData = React.useMemo(() => {\n        const units = {\n            weight: \"pounds\",\n            glucose: \"mg/dL\",\n            \"blood pressure\": \"mm/hg\"\n        }\n        const data = {}\n        if (patientData !== null) {\n            for (const metric in patientData.healthMetricData) {\n                const metric_list = patientData.healthMetricData[metric];\n                console.log(metric_list);\n                if (metric !== \"blood pressure\") {\n                    data[metric] = {\n                        datasets: [{\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value};\n                            }),\n                            label: metric,\n                            fill: false,\n                            backgroundColor: 'rgb(255, 99, 132)',\n                            borderColor: 'rgba(255, 99, 132, 0.2)'\n                        }], options:{\n                                scales: {\n                                    x: {type: \"time\", time: {unit: \"day\"}, grid: {\"color\": [\"#777\"]}, ticks:{color: \"#FFF\"}},\n                                    y: {grid: {\"color\": [\"#AAA\"]}, ticks:{color: \"#FFF\"}, title: {text:units[metric], display: true, color: \"#FFF\"}}\n                                },\n                                color: \"white\",\n                                plugins: {\n                                    legend: {display: false},\n                                    zoom: {\n                                        // pan: {\n                                        //     enabled: true,\n                                        //     mode: 'x'\n                                        // },\n                                        // limits: {\n                                        // // axis limits\n                                        // },\n                                        zoom: {\n                                            enabled:true,\n                                            mode:'xy'\n                                        }\n                                    }\n                                },\n                                showLine: true\n                        }\n                    };\n                } else { // blood pressure has two timeseries\n                    data[metric] = {\n                        datasets: [\n                        {\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value.systolic};\n                            }),\n                            label: \"systolic\",\n                            fill: false,\n                            backgroundColor: 'rgb(255, 99, 132)',\n                            borderColor: 'rgba(255, 99, 132, 0.2)'\n                        },\n                        {\n                            data: metric_list.map((metric) => {\n                                const jsTime = DateTime.fromHTTP(metric.time);\n                                return {x: jsTime, y: metric.value.diastolic};\n                            }),\n                            label: \"diastolic\",\n                            fill: false,\n                            backgroundColor: 'rgb(99, 255, 132)',\n                            borderColor: 'rgba(99, 255, 132, 0.2)'\n                        }\n                    ], options:{\n                        scales: {\n                            x: {type: \"time\", time: {unit: \"day\"}, grid: {\"color\": [\"#777\"]}, ticks:{color: \"#FFF\"}},\n                            y: {grid: {\"color\": [\"#AAA\"]}, ticks:{color: \"#FFF\"}, title: {text:units[metric], display: true, color: \"#FFF\"}}\n                        },\n\n                        color: \"white\",\n                        plugins: {\n                            datalabels: {color: 'black'}\n                        },\n                        showLine: true\n                    }\n                    };\n                }\n            }\n        }\n        console.log(\"returned HM data:\")\n        console.log(data);\n\n        return data;\n    }, [patientData]);\n\n    // scatter chart options\n\n    // const options =\n\n    const renderImpersonateListItem = React.useCallback((listItem) => {\n        console.log(listItem);\n        return listItem.label;\n    }, [])\n\n    const nextDayConversion = (dt) => {\n        if (dt.hour < 4) {\n            return dt.plus({days: 1});\n        }\n        return dt;\n    }\n\n    const validDoseWindows = React.useMemo(() => {\n        console.log(\"recomputing\")\n        if (editingDoseWindow === null) {\n            return true; // if you're not editing anything you're valid\n        };\n        if (patientData === null) {\n            return true;  // if we have no patient data your dose windows are fine\n        };\n        const editingStartTime = nextDayConversion(DateTime.utc(2021, 5, 1, editingDoseWindow.start_hour, editingDoseWindow.start_minute).setZone(\"local\").set({month: 5, day: 1}));\n        const editingEndTime = nextDayConversion(DateTime.utc(2021, 5, 1, editingDoseWindow.end_hour, editingDoseWindow.end_minute).setZone(\"local\").set({month: 5, day: 1}));\n        if (editingEndTime < editingStartTime.plus({minutes: 30})) {\n            return false; // dose window is too short\n        }\n        for (const dw of patientData.doseWindows) {\n            if (dw.id === editingDoseWindow.id) {\n                continue;  // we don't compare to the one we're editing\n            }\n            const existingStartTime = nextDayConversion(DateTime.utc(2021, 5, 1, dw.start_hour, dw.start_minute).setZone(\"local\").set({month: 5, day: 1}));\n            const existingEndTime = nextDayConversion(DateTime.utc(2021, 5, 1, dw.end_hour, dw.end_minute).setZone(\"local\").set({month: 5, day: 1}));\n            if (editingStartTime <= existingStartTime && existingStartTime <= editingEndTime) {\n                return false;\n            }\n            if (editingStartTime <= existingEndTime && existingEndTime <= editingEndTime) {\n                return false;\n            }\n        }\n        return true;\n    }, [editingDoseWindow, patientData]);\n\n    const currentTimeOfDay = React.useMemo(() => {\n        const currentTime = DateTime.local();\n        if (currentTime.hour > 4 && currentTime.hour < 12) {\n            return \"morning\";\n        } else if (currentTime.hour > 12 && currentTime.hour < 18) {\n            return \"afternoon\";\n        } else {\n            return \"evening\"\n        }\n    }, []);\n\n    const dateToDisplay = React.useMemo(() => {\n        const currentDay = DateTime.local();\n        if (calendarMonth === currentDay.month) {\n            return currentDay;\n        } else {\n            return currentDay.set({month: calendarMonth, day: 1});\n        }\n    }, [calendarMonth])\n\n    const randomChoice = (arr) => {\n        return arr[Math.floor(arr.length * Math.random())];\n    }\n    const randomHeaderEmoji = React.useMemo(() =>  {\n        return randomChoice([\"💫\", \"🌈\", \"🌱\", \"🏆\", \"📈\", \"💎\", \"💡\", \"🔆\", \"🔔\"]);\n    }, [])\n\n    const renderDoseWindowEditFields = React.useCallback(() => {\n        if (patientData === null) {\n            return null;\n        }\n        const startTime = DateTime.utc(2021, 5, 1, editingDoseWindow.start_hour, editingDoseWindow.start_minute);\n        const endTime = DateTime.utc(2021, 5, 1, editingDoseWindow.end_hour, editingDoseWindow.end_minute);\n        return (\n            <>\n                <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Start time (earliest time you'll be reminded)</Paragraph>\n                <TimeInput value={startTime.setZone('local')} color=\"dark-3\" onChangeTime={\n                    (newTime) => {\n                        const newDwTime = DateTime.local(2021, 5, 1, newTime.hour, newTime.minute).setZone(\"UTC\");\n                        setEditingDoseWindow({...editingDoseWindow, start_hour: newDwTime.hour, start_minute: newDwTime.minute});\n                    }}\n                />\n                <Paragraph size=\"small\" margin={{bottom: \"none\"}}>End time (latest time you'll be reminded)</Paragraph>\n                <TimeInput value={endTime.setZone('local')} color=\"dark-3\" onChangeTime={\n                    (newTime) => {\n                        console.log(`changed time to ${JSON.stringify(newTime)}`)\n                        const newDwTime = DateTime.local(2021, 5, 1, newTime.hour, newTime.minute).setZone(\"UTC\");\n                        setEditingDoseWindow({...editingDoseWindow, end_hour: newDwTime.hour, end_minute: newDwTime.minute});\n                    }}\n                />\n                {<AnimatingButton\n                    onClick={async () => {\n                        setAnimating(true);\n                        await updateDoseWindow(editingDoseWindow);\n                        await loadData();\n                        setEditingDoseWindow(null);\n                        if (impersonating === null) {\n                            trackSubmitEditedDoseWindow(patientData.id);\n                        }\n                    }}\n                    label={validDoseWindows ? \"Update\" : \"Invalid dose window\"}\n                    disabled={!validDoseWindows}\n                    animating={animating}\n                />}\n            </>\n        )\n    }, [animating, editingDoseWindow, impersonating, loadData, patientData, validDoseWindows]);\n\n    if (!cookies.token) {\n        return <Redirect to=\"/login\"/>;\n    }\n\n    const orderDays = (t1, t2) => {\n        if (t1 === t2) {\n            return 0;\n        }\n        if (t1 === \"morning\" || (t1 === \"afternoon\" && t2 === \"evening\")) {\n            return -1;\n        }\n        return 1;\n    }\n\n\n    return (\n        // <>\n        //     {cookies.token ? (<p>Logged in!</p>) : <Redirect to=\"/login\"/>}\n        //     <p>{JSON.stringify(patientData)}</p>\n        //     <button onClick={logout}>Logout</button>\n        //     {patientData.impersonateList ? <Select options={impersonateOptions} onChange={(selectedValue) => { loadDataForUser(selectedValue)}}/> : null}\n        //     {impersonating ? <p>Impersonating {impersonating}</p> : null}\n        // </>\n        <Box>\n            {impersonateOptions !== null ?\n                <Box direction=\"row\" align=\"center\" gap=\"small\" pad={{\"horizontal\": \"medium\"}}>\n                    <Paragraph>Impersonating:</Paragraph>\n                    <Select\n                        options={impersonateOptions}\n                        children={renderImpersonateListItem}\n                        onChange={({option}) => {\n                            console.log(\"setting\");\n                            setImpersonating(option);\n                        }}\n                    />\n                </Box> : null}\n            <Box align=\"center\">\n                <Heading size=\"small\">Good {currentTimeOfDay}{patientData ? `, ${patientData.patientName}` : \"\"}.</Heading>\n            </Box>\n            <Box>\n                {patientData && patientData.takeNow ?\n                    <Box\n                        align=\"center\"\n                        background={{\"color\":\"status-warning\", \"dark\": true}}\n                        round=\"medium\"\n                        margin={{horizontal: \"large\"}}\n                        pad={{vertical: \"medium\"}}\n                        animation={{\"type\":\"pulse\",\"size\":\"medium\",\"duration\":2000}}\n                    >\n                        <Paragraph alignSelf=\"center\" margin={{vertical: \"none\"}}>Dose to take now!</Paragraph>\n                    </Box>\n                    :\n                    <Box align=\"center\" background={{\"color\":\"brand\", \"dark\": true}} round=\"medium\" margin={{horizontal: \"large\"}}>\n                        <Paragraph>No doses to take right now. {randomHeaderEmoji}</Paragraph>\n                    </Box>\n                }\n            </Box>\n            <Box margin={{vertical: \"medium\"}} pad={{horizontal: \"large\"}}>\n                <DropButton\n                    icon={<CircleInformation/>}\n                    label=\"How do I use Coherence?\"\n                    dropContent={\n                        <Box pad={{horizontal: \"small\"}}>\n                            <Paragraph textAlign=\"center\">Texting commands</Paragraph>\n                            <Grid columns={[\"xsmall\", \"small\"]} align=\"center\" justifyContent=\"center\" gap={{column: \"small\"}}>\n                                <Paragraph size=\"small\">T, taken</Paragraph>\n                                <Paragraph size=\"small\">Mark your medication as taken at the current time</Paragraph>\n                                <Paragraph size=\"small\">T @ 5:00pm</Paragraph>\n                                <Paragraph size=\"small\">Mark your medication as taken at 5pm</Paragraph>\n                                <Paragraph size=\"small\">S, skip</Paragraph>\n                                <Paragraph size=\"small\">Skip the current dose</Paragraph>\n                                <Paragraph size=\"small\">1</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by ten minutes</Paragraph>\n                                <Paragraph size=\"small\">2</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by half an hour</Paragraph>\n                                <Paragraph size=\"small\">3</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by an hour</Paragraph>\n                                <Paragraph size=\"small\">20, 20 min</Paragraph>\n                                <Paragraph size=\"small\">Delay the reminder by 20 minutes</Paragraph>\n                                <Paragraph size=\"small\">glucose:140, 140 mg/dL</Paragraph>\n                                <Paragraph size=\"small\">Record glucose reading</Paragraph>\n                                <Paragraph size=\"small\">weight:150, 150 pounds, 150 lb</Paragraph>\n                                <Paragraph size=\"small\">Record weight reading</Paragraph>\n                                <Paragraph size=\"small\">120/80, 120 80</Paragraph>\n                                <Paragraph size=\"small\">Record blood pressure reading</Paragraph>\n                                <Paragraph size=\"small\">W, website, site</Paragraph>\n                                <Paragraph size=\"small\">Get the website link sent to you</Paragraph>\n                                <Paragraph size=\"small\">Eating, going for a walk</Paragraph>\n                                <Paragraph size=\"small\">Tell Coherence you're busy with an activity</Paragraph>\n                                <Paragraph size=\"small\">X</Paragraph>\n                                <Paragraph size=\"small\">Report an error</Paragraph>\n                            </Grid>\n                        </Box>\n                    }\n                    dropAlign={{ top: 'bottom' }}\n                />\n            </Box>\n            <Box pad=\"medium\" background={{color: \"light-3\"}}>\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}} fill={true}>Medication history</Paragraph>\n                <Calendar\n                    date={dateToDisplay.toISO()}\n                    fill={true}\n                    onSelect={(date) => {\n                        const dt = DateTime.fromISO(date);\n                        setSelectedDay(dt.day);\n                        if (impersonating === null) {\n                            trackViewedDayDetails(patientData.id);\n                        }\n                    }}\n                    showAdjacentDays={false}\n                    bounds={dateRange.map((date) => {return date.toString()})}\n                    children={renderDay}\n                    daysOfWeek={true}\n                    onReference={(date) => {\n                        setCalendarMonth(DateTime.fromISO(date).month);\n                        setPatientData({...patientData, eventData: []}); // hide event data while we load\n                    }}\n                    animate={false}\n                />\n            </Box>\n            {selectedDay && (\n                <Layer\n                    onEsc={() => setSelectedDay(false)}\n                    onClickOutside={() => setSelectedDay(false)}\n                    responsive={false}\n                >\n                    <Box width=\"70vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">{DateTime.local().set({month: calendarMonth}).monthLong} {selectedDay}</Paragraph>\n                            <Button icon={<Close />} onClick={() => setSelectedDay(false)} />\n                        </Box>\n                        {\n                            patientData.eventData[selectedDay - 1].day_status ?\n                            Object.keys(patientData.eventData[selectedDay - 1].time_of_day).sort(orderDays).map((key) => {\n                                let numberSuffix = patientData.eventData[selectedDay - 1].time_of_day[key].length > 1;  // handle multiple dose windows in the same time of day\n                                return (\n                                    patientData.eventData[selectedDay - 1].time_of_day[key].map((event, index) => {\n                                        return (\n                                            <>\n                                                <Paragraph key={`tod-${key}`} margin={{bottom: \"none\"}}>{key} dose{numberSuffix ? ` ${index + 1}` : ''}</Paragraph>\n                                                <Box key={`todStatusContainer-${key}`} pad={{left: \"medium\"}} direction=\"row\" align=\"center\" justify=\"between\">\n                                                    <Paragraph key={`todStatus-${key}`} size=\"small\">\n                                                        {event.type}{event.time ? ` at ${DateTime.fromJSDate(new Date(event.time)).toLocaleString(DateTime.TIME_SIMPLE)}` : ''}\n                                                    </Paragraph>\n                                                    {event.type === \"taken\" ? <Checkmark color=\"status-ok\" size=\"small\"/> : null}\n                                                    {event.type === \"skipped\" ? <Clear color=\"status-warning\" size=\"small\"/> : null}\n                                                    {event.type === \"missed\" ? <Close color=\"status-error\" size=\"small\"/> : null}\n                                                </Box>\n                                            </>\n                                        )\n                                    })\n                                )\n                            }) :\n                            <Paragraph>No data for this day.</Paragraph>\n                        }\n                    </Box>\n                </Layer>\n            )}\n            <Box align=\"center\" background=\"brand\" pad={{bottom: \"large\"}}>\n                <Paragraph margin={{bottom: \"none\"}}>Health tracking</Paragraph>\n                {Object.keys(formattedHealthMetricData).length === 0 ? <Paragraph size=\"small\">You're not tracking any health metrics yet.</Paragraph> : null}\n                {formattedHealthMetricData && \"blood pressure\" in formattedHealthMetricData ? (\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Blood pressure</Paragraph>\n                        {formattedHealthMetricData[\"blood pressure\"].datasets[0].data.length > 0 ?\n                            <Scatter data={formattedHealthMetricData[\"blood pressure\"]} options={formattedHealthMetricData[\"blood pressure\"].options}/> :\n                            <Paragraph alignSelf=\"center\" size=\"small\">No blood pressure data recorded yet. Example texts you can send: \"120/80\", \"120 80\".</Paragraph>\n                        }\n                    </Box>) : null}\n                {formattedHealthMetricData && \"weight\" in formattedHealthMetricData ?\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Weight</Paragraph>\n                        {formattedHealthMetricData.weight.datasets[0].data.length > 0 ?\n                        <Scatter data={formattedHealthMetricData.weight} options={formattedHealthMetricData.weight.options}/> :\n                        <Paragraph alignSelf=\"center\" size=\"small\">No weight data recorded yet. Example texts you can send: \"weight:150\", \"150 lb\", \"150 pounds\".</Paragraph>}\n                    </Box>\n                    : null}\n                {formattedHealthMetricData && \"glucose\" in formattedHealthMetricData ?\n                    <Box pad={{horizontal: \"large\"}} fill=\"horizontal\">\n                        <Paragraph size=\"small\" margin={{bottom: \"none\"}}>Glucose</Paragraph>\n                        {formattedHealthMetricData.glucose.datasets[0].data.length > 0 ?\n                        <Scatter data={formattedHealthMetricData.glucose} options={formattedHealthMetricData.glucose.options}/> :\n                        <Paragraph alignSelf=\"center\" size=\"small\">No glucose data recorded yet. Example texts you can send: \"glucose:140\", \"140 mg/dL\"</Paragraph>}\n                    </Box>\n                    : null}\n                <Button label={Object.keys(formattedHealthMetricData).length === 0 ? \"Start tracking\": \"Edit tracking\"} onClick={() => {\n                    setEditingHealthTracking(Object.keys(formattedHealthMetricData));\n                    if (impersonating === null) {\n                        trackStartEditingHealthMetrics(patientData.id);\n                    }\n                }} margin={{top: \"medium\"}}/>\n            </Box>\n            {editingHealthTracking !== null ?\n                <Layer\n                    onEsc={() => setEditingHealthTracking(null)}\n                    onClickOutside={() => setEditingHealthTracking(null)}\n                    responsive={false}\n                >\n                    <Box width=\"70vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Choose what you want to track</Paragraph>\n                            <Button icon={<Close />} onClick={() => setEditingHealthTracking(null)} />\n                        </Box>\n                        <CheckBoxGroup\n                            options={[\"blood pressure\", \"weight\", \"glucose\"]}\n                            value={editingHealthTracking}\n                            onChange={(e) => {setEditingHealthTracking(e.value)}}\n                        />\n                        <AnimatingButton animating={animating} label=\"Save changes\" margin={{top:\"medium\"}} onClick={async () => {\n                            setAnimating(true);\n                            console.log(editingHealthTracking);\n                            await setHealthMetricsTracking(editingHealthTracking);\n                            await loadData();\n                            setEditingHealthTracking(null);\n                            if (impersonating === null) {\n                                trackSubmitEditingHealthMetrics(patientData.id);\n                            }\n                        }}/>\n                    </Box>\n                </Layer> : null\n            }\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"bottom\">\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Dose windows</Paragraph>\n                    {\n                        patientData ? patientData.doseWindows.map((dw) => {\n                            const startTime = DateTime.utc(2021, 5, 1, dw.start_hour, dw.start_minute);\n                            const endTime = DateTime.utc(2021, 5, 1, dw.end_hour, dw.end_minute);\n                            return (\n                                <Grid key={`doseWindowContainer-${dw.id}`} columns={[\"small\", \"flex\", \"flex\"]} align=\"center\" pad={{horizontal: \"large\"}} alignContent=\"center\" justifyContent=\"center\" justify=\"center\">\n                                    <Box direction=\"row\" align=\"center\">\n                                        <Paragraph>{startTime.setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                        <FormNextLink/>\n                                        <Paragraph>{endTime.setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                    </Box>\n                                    <Button label=\"edit\" onClick={() => {\n                                        setEditingDoseWindow(dw);\n                                        if (impersonating === null) {\n                                            trackStartEditingDoseWindow(patientData.id);\n                                        }\n                                    }} size=\"small\" margin={{horizontal: \"none\"}}/>\n                                    <Button onClick={() => {\n                                        setDeletingDoseWindow(dw);\n                                        if (impersonating === null) {\n                                            trackStartDeletingDoseWindow(patientData.id);\n                                        }\n                                    }} icon={<Close/>} size=\"small\" padding={{horizontal: \"none\"}}/>\n                                </Grid>\n                            )\n                        }) : null\n                    }\n                    <Button label=\"Add dose window\" onClick={() => {\n                        setEditingDoseWindow({start_hour: 0, start_minute:0, end_hour: 0, end_minute: 0});\n                        if (impersonating === null) {\n                            trackStartAddingDoseWindow(patientData.id);\n                        }\n                    }} icon={<Add/>}/>\n            </Box>\n            {editingDoseWindow && (\n                <Layer\n                    onEsc={() => setEditingDoseWindow(null)}\n                    onClickOutside={() => setEditingDoseWindow(null)}\n                    responsive={false}\n                >\n                    <Box width=\"90vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Edit dose window</Paragraph>\n                            <Button icon={<Close />} onClick={() => setEditingDoseWindow(null)} />\n                        </Box>\n                        <Box>\n                            {renderDoseWindowEditFields(editingDoseWindow)}\n                        </Box>\n                    </Box>\n                </Layer>\n            )}\n            {deletingDoseWindow && (\n                <Layer\n                    onEsc={() => setDeletingDoseWindow(null)}\n                    onClickOutside={() => setDeletingDoseWindow(null)}\n                    responsive={false}\n                >\n                    <Box width=\"90vw\" pad=\"large\">\n                        <Box direction=\"row\" justify=\"between\">\n                            <Paragraph size=\"large\">Confirm delete dose window</Paragraph>\n                            <Button icon={<Close />} onClick={() => setDeletingDoseWindow(null)}/>\n                        </Box>\n                        <Box align=\"center\">\n                            <Paragraph margin={{bottom: \"none\"}}>You're about to delete the dose window</Paragraph>\n                            <Box direction=\"row\" align=\"center\" margin={{bottom: \"medium\"}}>\n                                <Paragraph>{DateTime.utc(2021, 5, 1, deletingDoseWindow.start_hour, deletingDoseWindow.start_minute).setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                                <FormNextLink/>\n                                <Paragraph>{DateTime.utc(2021, 5, 1, deletingDoseWindow.end_hour, deletingDoseWindow.end_minute).setZone('local').toLocaleString(DateTime.TIME_SIMPLE)}</Paragraph>\n                            </Box>\n                            <AnimatingButton onClick={async () => {\n                                setAnimating(true);\n                                await deleteDoseWindow(deletingDoseWindow.id)\n                                await loadData();\n                                setDeletingDoseWindow(null);\n                                if (impersonating === null) {\n                                    trackSubmitDeletingDoseWindow(patientData.id);\n                                }\n                            }} label=\"Confirm\" animating={animating}/>\n                        </Box>\n                    </Box>\n                </Layer>\n            )}\n            <Box align=\"center\" pad={{vertical: \"medium\"}}>\n                {patientData ?\n                <>\n                    <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Pause / resume Coherence</Paragraph>\n                    <Paragraph size=\"small\" color=\"dark-3\">Coherence is currently {patientData.pausedService ? \"paused\" : \"active\"}.</Paragraph>\n                    <AnimatingButton\n                        background={patientData.pausedService ? {\"dark\": true} : null}\n                        animating={animating}\n                        style={{padding: \"10px\"}}\n                        primary={patientData.pausedService}\n                        onClick={async () => {\n                            setAnimating(true);\n                            if (patientData.pausedService) {\n                                await resumeUser();\n                                if (impersonating === null) {\n                                    trackResumedService(patientData.id);\n                                }\n                            } else {\n                                await pauseUser();\n                                if (impersonating === null) {\n                                    trackPausedService(patientData.id);\n                                }\n                            }\n                            loadData();\n                        }} label={`${patientData.pausedService ? \"Resume\" : \"Pause\"} Coherence`} />\n                    {patientData.pausedService ? <Paragraph size=\"small\" color=\"status-warning\" textAlign=\"center\">While Coherence is paused, we can't respond to any texts you send us, or remind you about your medications.</Paragraph> : null}\n                </> : null}\n            </Box>\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"top\">\n                <Paragraph textAlign=\"center\" margin={{vertical: \"none\"}}>Need help with anything?</Paragraph>\n                <Paragraph size=\"small\" color=\"dark-3\">Our customer service is just a text away at (650) 667-1146. Reach out any time and we'll get back to you in a few hours!</Paragraph>\n            </Box>\n            <Box align=\"center\" pad={{vertical: \"medium\"}} margin={{horizontal: \"xlarge\"}} border=\"top\">\n                <Button onClick={logout} label=\"Log out\" />\n            </Box>\n        </Box>\n    )\n}\n\nexport default Home;","import React from \"react\";\nimport { login } from \"../api\";\nimport { useCookies } from 'react-cookie';\nimport { Redirect } from 'react-router-dom';\nimport { Box, Paragraph, Heading, Button, TextInput } from \"grommet\";\nimport { Phone, Login, Fireball, Lock } from \"grommet-icons\";\n\nconst Intro = () => {\n    const [phoneNumber, setPhoneNumber] = React.useState(\"\");\n    const [secretCode, setSecretCode] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [passwordConfirm, setPasswordConfirm] = React.useState(\"\");\n    const [componentToDisplay, setComponentToDisplay] = React.useState(\"phoneNumber\");\n    const [cookies, setCookie] = useCookies([\"token\"]);\n    const [authError, setAuthError] = React.useState(false);\n    const submitAll = React.useCallback(async () => {\n        const response = await login(phoneNumber, secretCode, password);\n        if (response === null) {\n            setAuthError(true);\n        } else {\n            if (response.status === \"success\") {\n                console.log(\"setting cookie\");\n                setCookie(\"token\", response.token, {secure: true});\n            }\n            setComponentToDisplay(response.status);\n            setAuthError(false);\n        }\n    }, [password, phoneNumber, secretCode, setCookie])\n    const getInputField = React.useCallback(() => {\n        if (componentToDisplay === \"phoneNumber\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Enter phone number.</Paragraph>\n                <TextInput\n                    icon={<Phone/>}\n                    placeholder=\"(555) 555-5555\"\n                    size=\"small\"\n                    value={phoneNumber}\n                    onChange={(event) => {setPhoneNumber(event.target.value)}}\n                />\n                {authError ? <Paragraph size=\"small\">Invalid phone number.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"2fa\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">We've texted you a secret code, enter it below.</Paragraph>\n                <TextInput\n                    icon={<Fireball />}\n                    placeholder=\"123456\"\n                    size=\"small\"\n                    value={secretCode}\n                    onChange={(event) => {setSecretCode(event.target.value)}}\n                />\n                {authError ? <Paragraph size=\"small\">Invalid secret code.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"password\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Enter password.</Paragraph>\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"•••••••••\"\n                    size=\"small\"\n                    value={password}\n                    onChange={(event) => {\n                        setPassword(event.target.value);\n                        setPasswordConfirm(event.target.value);\n                    }}\n                    type=\"password\"\n                />\n                {authError ? <Paragraph size=\"small\">Invalid password. If you'd like us to reset it, give us a text at (650) 667-1146.</Paragraph> : null}\n            </>\n        } else if (componentToDisplay === \"register\") {\n            return <>\n                <Paragraph textAlign=\"center\" size=\"small\">Create your password.</Paragraph>\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"Enter password\"\n                    size=\"small\"\n                    value={password}\n                    onChange={(event) => {setPassword(event.target.value)}}\n                    type=\"password\"\n                />\n                <TextInput\n                    icon={<Lock />}\n                    placeholder=\"Type it again\"\n                    size=\"small\"\n                    value={passwordConfirm}\n                    onChange={(event) => {setPasswordConfirm(event.target.value)}}\n                    type=\"password\"\n                />\n                {password !== passwordConfirm ? <Paragraph size=\"small\">Passwords don't match.</Paragraph> : null}\n            </>\n        }\n    }, [authError, componentToDisplay, password, passwordConfirm, phoneNumber, secretCode])\n    if (cookies.token) {\n        return <Redirect to=\"/\"/>;\n    }\n    return (\n        <Box height=\"100vh\" flex=\"grow\" background={{\"position\":\"center\",\"dark\":false,\"opacity\":\"strong\"}}>\n            <Box height=\"40vh\" align=\"center\" justify=\"center\" pad=\"large\">\n                <Paragraph>welcome to</Paragraph>\n                <Heading>coherence</Heading>\n            </Box>\n            <Box height=\"60vh\" align=\"center\" justify=\"between\" background={{color: \"brand\", dark: true}} pad=\"large\">\n                <Paragraph color=\"white\" textAlign=\"center\">Peace of mind with your medications is just around the corner.</Paragraph>\n                <Box>\n                    <Box width=\"200px\" margin={{bottom: \"medium\", top: \"xsmall\"}}>\n                        {getInputField()}\n                    </Box>\n                    <Button label=\"submit\" icon={<Login/>} onClick={submitAll} disabled={password !== passwordConfirm}/>\n                </Box>\n            </Box>\n        </Box>\n    )\n}\n\nexport default Intro;","import './App.css';\nimport Home from './pages/Home';\nimport Intro from './pages/Intro';\n\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n        <Switch>\n            <Route exact path={'/'} render={() => <Home />}/>\n            <Route exact path={'/login'} render={() => <Intro />}/>\n        </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CookiesProvider } from 'react-cookie';\nimport { Grommet } from \"grommet\";\n\nconst grommetTheme = {\n  global: {\n    colors: {\n      brand: \"#002864\",\n      text: {light: \"#002864\"},\n      paragraph: {light: \"#002864\"},\n      background: \"#FFF\"\n    }\n  },\n  spinner: {\n    container: {\n      color: {\n        light: \"#002864\",\n        dark: \"FFF\"\n      }\n    }\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookiesProvider>\n      <Grommet theme={grommetTheme} themeMode=\"light\">\n        <App />\n      </Grommet>\n    </CookiesProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}